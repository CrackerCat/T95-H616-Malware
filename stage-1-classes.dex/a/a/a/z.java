package a.a.a;

import co.fm.ub.d.tp;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.SocketException;
import java.util.Date;
/* loaded from: /mnt/shared/apks/menSe7ni.dex */
class z implements Runnable {

    /* renamed from: a  reason: collision with root package name */
    private final byte[] f370a = new byte[4096];
    private InetSocketAddress b = null;
    private DatagramSocket c = null;
    private InetAddress d = null;
    private boolean e = false;
    private long f = 3000;

    /* renamed from: g  reason: collision with root package name */
    private InetAddress f371g = null;
    private ad h = null;
    private h i = null;

    private void a() {
        DatagramSocket datagramSocket = this.c;
        if (datagramSocket != null) {
            datagramSocket.close();
            this.c = null;
        }
        this.b = null;
        this.d = null;
        ab.e = ac.Init;
        long j = this.f;
        long j2 = 3000;
        if (j >= 3000) {
            double d = j;
            Double.isNaN(d);
            long random = j + ((long) (d * 0.1d)) + ((long) (Math.random() * 5.0d));
            this.f = random;
            j2 = tp.H;
            if (random <= tp.H) {
                return;
            }
        }
        this.f = j2;
    }

    private boolean b() {
        try {
            b.a("InitTimeout: " + this.f);
            Thread.sleep(this.f);
            if (this.e) {
                Thread.sleep(this.f);
            }
            String[] strArr = a.f328a;
            double random = Math.random();
            double length = a.f328a.length;
            Double.isNaN(length);
            String[] split = strArr[(int) (random * length)].split(":");
            String str = split[0];
            int parseInt = Integer.parseInt(split[1]);
            b.a("Trying hostname:" + str + ":" + parseInt);
            InetAddress[] allByName = InetAddress.getAllByName(str);
            if (allByName.length == 0) {
                b.a("No address found!");
                return false;
            }
            int length2 = allByName.length;
            for (int i = 0; i < length2; i++) {
                b.a("Addr: " + allByName[i].getHostAddress());
            }
            double random2 = Math.random();
            double length3 = allByName.length;
            Double.isNaN(length3);
            this.b = new InetSocketAddress(allByName[(int) (random2 * length3)], parseInt);
            ab.e = ac.IpCheck;
            return true;
        } catch (Exception e) {
            b.b("Init Phase Error: " + e.getMessage());
            return false;
        }
    }

    private boolean c() {
        DatagramPacket datagramPacket;
        if (this.c == null) {
            try {
                DatagramSocket datagramSocket = new DatagramSocket();
                this.c = datagramSocket;
                datagramSocket.setSoTimeout(5000);
            } catch (SocketException e) {
                b.b(e.getMessage());
            }
        }
        try {
            byte[] a2 = l.a();
            this.c.send(new DatagramPacket(a2, a2.length, this.b));
            while (true) {
                try {
                    byte[] bArr = this.f370a;
                    datagramPacket = new DatagramPacket(bArr, bArr.length);
                    this.c.receive(datagramPacket);
                    if (datagramPacket.getAddress().equals(this.b.getAddress())) {
                        break;
                    }
                } catch (IOException e2) {
                    b.b(e2.getMessage());
                    return false;
                }
            }
            af a3 = l.a(datagramPacket);
            this.d = a3.c;
            if (a3.f352a != 0 && a3.b != 0) {
                h hVar = new h();
                this.i = hVar;
                hVar.d.h = "" + a3.b;
                this.f371g = this.d;
            }
            ab.e = ac.UpdatingGeoInfo;
            return true;
        } catch (IOException e3) {
            b.b(e3.getMessage());
            return false;
        }
    }

    private boolean d() {
        InetAddress inetAddress = this.f371g;
        if (inetAddress != null && inetAddress.equals(this.d) && this.i != null) {
            b.a("IpRemainUnchanged, skip geoinfo, my address is: " + this.d);
            try {
                byte[] a2 = m.a(this.d, this.i.d.d);
                this.c.send(new DatagramPacket(a2, a2.length, this.b));
                while (true) {
                    byte[] bArr = this.f370a;
                    DatagramPacket datagramPacket = new DatagramPacket(bArr, bArr.length);
                    this.c.receive(datagramPacket);
                    if (datagramPacket.getAddress().equals(this.b.getAddress())) {
                        this.h = m.a(datagramPacket);
                        b.a("ServerInfo:Address=" + this.h.f349a);
                        ab.e = ac.ConfigReady;
                        return true;
                    }
                }
            } catch (IOException e) {
                b.b(e.getMessage());
            }
        }
        return false;
    }

    @Override // java.lang.Runnable
    public void run() {
        do {
        } while (!y.b.compareAndSet(false, true));
        while (y.b.get()) {
            if (ab.e != ac.Init || b()) {
                if ((ab.e != ac.IpCheck || c()) && (ab.e != ac.UpdatingGeoInfo || d())) {
                    if (ab.e == ac.ConfigReady) {
                        Thread thread = new Thread(new aa(this));
                        thread.start();
                        long time = new Date().getTime();
                        while (y.b.get()) {
                            try {
                                thread.join();
                                break;
                            } catch (InterruptedException unused) {
                            }
                        }
                        ae.a();
                        while (thread.isAlive()) {
                            try {
                                thread.join();
                            } catch (InterruptedException unused2) {
                            }
                        }
                        long time2 = new Date().getTime() - time;
                        b.a("main thread lifetime " + time2);
                        if (time2 >= 300000) {
                            this.f = 0L;
                        }
                    }
                }
                a();
            }
        }
    }
}
