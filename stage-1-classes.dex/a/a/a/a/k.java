package a.a.a.a;

import java.nio.ByteBuffer;
import java.util.Random;
/* loaded from: /mnt/shared/apks/menSe7ni.dex */
public class k {

    /* renamed from: a  reason: collision with root package name */
    private String f339a;
    private p b;

    public k(String str, p pVar) {
        this.f339a = str;
        this.b = pVar;
    }

    private char a(p pVar) {
        if (pVar == p.A) {
            return '1';
        }
        return pVar == p.NS ? '2' : 'F';
    }

    private byte[] a(int i) {
        ByteBuffer allocate = ByteBuffer.allocate(i + 5);
        String[] split = this.f339a.split("\\.");
        for (int i2 = 0; i2 < split.length; i2++) {
            allocate.put((byte) split[i2].length());
            for (int i3 = 0; i3 < split[i2].length(); i3++) {
                allocate.put((byte) split[i2].charAt(i3));
            }
        }
        allocate.put((byte) 0);
        allocate.put(a("000" + a(this.b)));
        allocate.put((byte) 0);
        allocate.put((byte) 1);
        return allocate.array();
    }

    private static byte[] a(String str) {
        int length = str.length();
        byte[] bArr = new byte[length / 2];
        for (int i = 0; i < length; i += 2) {
            bArr[i / 2] = (byte) ((Character.digit(str.charAt(i), 16) << 4) + Character.digit(str.charAt(i + 1), 16));
        }
        return bArr;
    }

    private byte[] b() {
        ByteBuffer allocate = ByteBuffer.allocate(12);
        byte[] bArr = new byte[2];
        new Random().nextBytes(bArr);
        allocate.put(bArr);
        allocate.put((byte) 1);
        allocate.put((byte) 0);
        allocate.put((byte) 0);
        allocate.put((byte) 1);
        return allocate.array();
    }

    private int c() {
        int i = 0;
        for (String str : this.f339a.split("\\.")) {
            i += str.length() + 1;
        }
        return i;
    }

    public byte[] a() {
        int c = c();
        ByteBuffer allocate = ByteBuffer.allocate(c + 17);
        allocate.put(b());
        allocate.put(a(c));
        return allocate.array();
    }
}
