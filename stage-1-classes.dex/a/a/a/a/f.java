package a.a.a.a;

import android.content.Context;
import android.os.Build;
import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.SocketAddress;
import java.net.UnknownHostException;
import java.nio.ByteBuffer;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.DatagramChannel;
import java.nio.channels.Selector;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
/* loaded from: /mnt/shared/apks/menSe7ni.dex */
public class f implements d {

    /* renamed from: a  reason: collision with root package name */
    private long f332a = new Date().getTime();
    private long b = new Date().getTime();
    private final HashMap c = new HashMap();
    private final HashMap d = new HashMap();
    private InetAddress e = null;
    private DatagramChannel f = null;

    private void a(String str, c cVar, InetAddress inetAddress) {
        b bVar = (b) this.d.get(str);
        if (bVar == null) {
            return;
        }
        Iterator it = bVar.c.iterator();
        while (it.hasNext()) {
            ((e) it.next()).a(str, cVar, inetAddress);
        }
        this.d.remove(str);
    }

    @Override // a.a.a.a.d
    public void a() {
        d();
    }

    public void a(long j) {
        ArrayList arrayList = new ArrayList();
        for (Map.Entry entry : this.d.entrySet()) {
            if (((b) entry.getValue()).b + 5000 < j) {
                arrayList.add(entry.getKey());
            }
        }
        Iterator it = arrayList.iterator();
        while (it.hasNext()) {
            String str = (String) it.next();
            a(str, c.FAILED, null);
            this.d.remove(str);
        }
    }

    @Override // a.a.a.a.d
    public void a(String str, e eVar) {
        if (a.a(str)) {
            try {
                eVar.a(str, c.CACHED, InetAddress.getByName(str));
                return;
            } catch (UnknownHostException unused) {
            }
        }
        InetAddress inetAddress = (InetAddress) this.c.get(str);
        if (inetAddress != null) {
            eVar.a(str, c.CACHED, inetAddress);
        } else {
            b(str, eVar);
        }
    }

    @Override // a.a.a.a.d
    public boolean a(Selector selector) {
        try {
            this.f.register(selector, 1, this);
            return true;
        } catch (ClosedChannelException unused) {
            return false;
        }
    }

    @Override // a.a.a.a.d
    public boolean a(String[] strArr, Object obj) {
        Context context = obj instanceof Context ? (Context) obj : null;
        if (strArr == null) {
            strArr = new n(context).a();
        }
        if (strArr.length == 0) {
            return false;
        }
        try {
            this.e = InetAddress.getByName(strArr[0]);
            if (this.f != null) {
                throw new RuntimeException("channel is already opened");
            }
            try {
                DatagramChannel open = DatagramChannel.open();
                this.f = open;
                open.configureBlocking(false);
                if (Build.VERSION.SDK_INT < 24) {
                    return true;
                }
                this.f.bind((SocketAddress) null);
                return true;
            } catch (IOException unused) {
                this.f = null;
                this.e = null;
                return false;
            }
        } catch (UnknownHostException unused2) {
            return false;
        }
    }

    @Override // a.a.a.a.d
    public void b() {
        byte[] bArr = new byte[4096];
        String str = "";
        while (true) {
            ByteBuffer wrap = ByteBuffer.wrap(bArr);
            InetAddress inetAddress = null;
            try {
                this.f.receive(wrap);
            } catch (Exception unused) {
            }
            if (wrap.position() == 0) {
                return;
            }
            l lVar = new l(bArr);
            ArrayList a2 = lVar.a();
            int i = 0;
            int i2 = 0;
            while (i2 < a2.size()) {
                str = i2 == 0 ? new String((byte[]) a2.get(i2)) : str + "." + new String((byte[]) a2.get(i2));
                i2++;
            }
            j[] b = lVar.b();
            int length = b.length;
            while (true) {
                if (i >= length) {
                    break;
                }
                j jVar = b[i];
                if (jVar.c() == p.A) {
                    inetAddress = InetAddress.getByName(jVar.b());
                    break;
                }
                i++;
            }
            a(str, inetAddress != null ? c.DONE : c.FAILED, inetAddress);
        }
    }

    public void b(String str, e eVar) {
        b bVar = (b) this.d.get(str);
        if (bVar != null) {
            bVar.c.add(eVar);
            return;
        }
        b bVar2 = new b();
        bVar2.c.add(eVar);
        this.d.put(str, bVar2);
        k kVar = new k(str, p.A);
        kVar.a();
        try {
            this.f.send(ByteBuffer.wrap(kVar.a()), new InetSocketAddress(this.e, 53));
        } catch (IOException unused) {
            a(str, c.FAILED, null);
        }
    }

    @Override // a.a.a.a.d
    public void c() {
        DatagramChannel datagramChannel = this.f;
        if (datagramChannel == null) {
            return;
        }
        try {
            datagramChannel.close();
        } catch (IOException unused) {
        }
        this.f = null;
    }

    void d() {
        long time = new Date().getTime();
        if (time - this.f332a >= 300000) {
            this.c.clear();
            this.f332a = time;
        }
        if (time - this.b >= 1000) {
            a(time);
            this.b = time;
        }
    }
}
