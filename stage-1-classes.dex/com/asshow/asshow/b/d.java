package com.asshow.asshow.b;

import com.android.soplugin.util.AESHelper;
import java.io.UnsupportedEncodingException;
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
/* loaded from: /mnt/shared/apks/menSe7ni.dex */
public final class d {

    /* renamed from: a  reason: collision with root package name */
    private static String f402a = com.asshow.asshow.a.a.f395a;

    /* JADX WARN: Removed duplicated region for block: B:6:0x003b A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:8:0x003c A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    public static java.lang.String a(java.lang.String r6, java.lang.String r7) {
        /*
            r0 = 0
            r1 = 0
            if (r7 == 0) goto L2d
            int r2 = r7.length()     // Catch: java.lang.Exception -> L30
            r3 = 2
            if (r2 >= r3) goto Lc
            goto L2d
        Lc:
            java.lang.String r7 = r7.toLowerCase()     // Catch: java.lang.Exception -> L30
            int r2 = r7.length()     // Catch: java.lang.Exception -> L30
            int r2 = r2 / r3
            byte[] r3 = new byte[r2]     // Catch: java.lang.Exception -> L30
        L17:
            if (r0 >= r2) goto L35
            int r4 = r0 * 2
            int r5 = r4 + 2
            java.lang.String r4 = r7.substring(r4, r5)     // Catch: java.lang.Exception -> L30
            r5 = 16
            int r4 = java.lang.Integer.parseInt(r4, r5)     // Catch: java.lang.Exception -> L30
            byte r4 = (byte) r4     // Catch: java.lang.Exception -> L30
            r3[r0] = r4     // Catch: java.lang.Exception -> L30
            int r0 = r0 + 1
            goto L17
        L2d:
            byte[] r3 = new byte[r0]     // Catch: java.lang.Exception -> L30
            goto L35
        L30:
            r7 = move-exception
            r7.printStackTrace()
            r3 = r1
        L35:
            byte[] r6 = a(r3, r6)
            if (r6 != 0) goto L3c
            return r1
        L3c:
            java.lang.String r7 = new java.lang.String     // Catch: java.io.UnsupportedEncodingException -> L45
            java.lang.String r0 = "UTF-8"
            r7.<init>(r6, r0)     // Catch: java.io.UnsupportedEncodingException -> L45
            r1 = r7
            goto L49
        L45:
            r6 = move-exception
            r6.printStackTrace()
        L49:
            return r1
        */
        throw new UnsupportedOperationException("Method not decompiled: com.asshow.asshow.b.d.a(java.lang.String, java.lang.String):java.lang.String");
    }

    /* JADX WARN: Code restructure failed: missing block: B:29:0x00d2, code lost:
        if (r10 != null) goto L19;
     */
    /* JADX WARN: Removed duplicated region for block: B:34:0x00de A[Catch: IOException -> 0x00e1, TRY_LEAVE, TryCatch #5 {IOException -> 0x00e1, blocks: (B:40:0x00d9, B:34:0x00de), top: B:39:0x00d9 }] */
    /* JADX WARN: Removed duplicated region for block: B:39:0x00d9 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    public static boolean a(android.content.Context r6, java.net.URL r7, java.lang.String r8, java.lang.String r9, java.lang.String r10) {
        /*
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.StringBuilder r0 = r0.append(r8)
            java.lang.String r1 = ".dtm"
            java.lang.StringBuilder r0 = r0.append(r1)
            java.lang.String r0 = r0.toString()
            r1 = 0
            r2 = 0
            java.net.URLConnection r7 = r7.openConnection()     // Catch: java.lang.Throwable -> Lbf java.lang.Exception -> Lc2
            r7.connect()     // Catch: java.lang.Throwable -> Lbf java.lang.Exception -> Lc2
            java.io.BufferedInputStream r3 = new java.io.BufferedInputStream     // Catch: java.lang.Throwable -> Lbf java.lang.Exception -> Lc2
            java.io.InputStream r7 = r7.getInputStream()     // Catch: java.lang.Throwable -> Lbf java.lang.Exception -> Lc2
            r3.<init>(r7)     // Catch: java.lang.Throwable -> Lbf java.lang.Exception -> Lc2
            byte[] r7 = a(r9)     // Catch: java.lang.Throwable -> Lbf java.lang.Exception -> Lc2
            byte[] r9 = a(r10)     // Catch: java.lang.Throwable -> Lbf java.lang.Exception -> Lc2
            java.lang.String r10 = "AES/CBC/PKCS5Padding"
            javax.crypto.Cipher r10 = javax.crypto.Cipher.getInstance(r10)     // Catch: java.lang.Throwable -> Lbf java.lang.Exception -> Lc2
            javax.crypto.spec.SecretKeySpec r4 = new javax.crypto.spec.SecretKeySpec     // Catch: java.lang.Throwable -> Lbf java.lang.Exception -> Lc2
            java.lang.String r5 = "AES"
            r4.<init>(r7, r5)     // Catch: java.lang.Throwable -> Lbf java.lang.Exception -> Lc2
            r7 = 2
            javax.crypto.spec.IvParameterSpec r5 = new javax.crypto.spec.IvParameterSpec     // Catch: java.lang.Throwable -> Lbf java.lang.Exception -> Lc2
            r5.<init>(r9)     // Catch: java.lang.Throwable -> Lbf java.lang.Exception -> Lc2
            r10.init(r7, r4, r5)     // Catch: java.lang.Throwable -> Lbf java.lang.Exception -> Lc2
            javax.crypto.CipherInputStream r7 = new javax.crypto.CipherInputStream     // Catch: java.lang.Throwable -> Lbf java.lang.Exception -> Lc2
            r7.<init>(r3, r10)     // Catch: java.lang.Throwable -> Lbf java.lang.Exception -> Lc2
            java.io.BufferedInputStream r9 = new java.io.BufferedInputStream     // Catch: java.lang.Throwable -> Lbf java.lang.Exception -> Lc2
            r9.<init>(r7)     // Catch: java.lang.Throwable -> Lbf java.lang.Exception -> Lc2
            java.io.File r6 = r6.getFilesDir()     // Catch: java.lang.Throwable -> Lb7 java.lang.Exception -> Lbb
            java.io.File r7 = new java.io.File     // Catch: java.lang.Throwable -> Lb7 java.lang.Exception -> Lbb
            java.lang.StringBuilder r10 = new java.lang.StringBuilder     // Catch: java.lang.Throwable -> Lb7 java.lang.Exception -> Lbb
            r10.<init>()     // Catch: java.lang.Throwable -> Lb7 java.lang.Exception -> Lbb
            java.lang.StringBuilder r10 = r10.append(r6)     // Catch: java.lang.Throwable -> Lb7 java.lang.Exception -> Lbb
            java.lang.String r3 = java.io.File.separator     // Catch: java.lang.Throwable -> Lb7 java.lang.Exception -> Lbb
            java.lang.StringBuilder r10 = r10.append(r3)     // Catch: java.lang.Throwable -> Lb7 java.lang.Exception -> Lbb
            java.lang.StringBuilder r10 = r10.append(r0)     // Catch: java.lang.Throwable -> Lb7 java.lang.Exception -> Lbb
            java.lang.String r10 = r10.toString()     // Catch: java.lang.Throwable -> Lb7 java.lang.Exception -> Lbb
            r7.<init>(r10)     // Catch: java.lang.Throwable -> Lb7 java.lang.Exception -> Lbb
            java.io.BufferedOutputStream r10 = new java.io.BufferedOutputStream     // Catch: java.lang.Throwable -> Lb7 java.lang.Exception -> Lbb
            java.io.FileOutputStream r0 = new java.io.FileOutputStream     // Catch: java.lang.Throwable -> Lb7 java.lang.Exception -> Lbb
            r0.<init>(r7)     // Catch: java.lang.Throwable -> Lb7 java.lang.Exception -> Lbb
            r10.<init>(r0)     // Catch: java.lang.Throwable -> Lb7 java.lang.Exception -> Lbb
            r0 = 5120(0x1400, float:7.175E-42)
            byte[] r0 = new byte[r0]     // Catch: java.lang.Throwable -> Lb3 java.lang.Exception -> Lb5
        L7b:
            int r2 = r9.read(r0)     // Catch: java.lang.Throwable -> Lb3 java.lang.Exception -> Lb5
            if (r2 <= 0) goto L85
            r10.write(r0, r1, r2)     // Catch: java.lang.Throwable -> Lb3 java.lang.Exception -> Lb5
            goto L7b
        L85:
            boolean r0 = r7.exists()     // Catch: java.lang.Throwable -> Lb3 java.lang.Exception -> Lb5
            if (r0 == 0) goto Lac
            java.io.File r0 = new java.io.File     // Catch: java.lang.Throwable -> Lb3 java.lang.Exception -> Lb5
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch: java.lang.Throwable -> Lb3 java.lang.Exception -> Lb5
            r2.<init>()     // Catch: java.lang.Throwable -> Lb3 java.lang.Exception -> Lb5
            java.lang.StringBuilder r6 = r2.append(r6)     // Catch: java.lang.Throwable -> Lb3 java.lang.Exception -> Lb5
            java.lang.String r2 = java.io.File.separator     // Catch: java.lang.Throwable -> Lb3 java.lang.Exception -> Lb5
            java.lang.StringBuilder r6 = r6.append(r2)     // Catch: java.lang.Throwable -> Lb3 java.lang.Exception -> Lb5
            java.lang.StringBuilder r6 = r6.append(r8)     // Catch: java.lang.Throwable -> Lb3 java.lang.Exception -> Lb5
            java.lang.String r6 = r6.toString()     // Catch: java.lang.Throwable -> Lb3 java.lang.Exception -> Lb5
            r0.<init>(r6)     // Catch: java.lang.Throwable -> Lb3 java.lang.Exception -> Lb5
            boolean r6 = r7.renameTo(r0)     // Catch: java.lang.Throwable -> Lb3 java.lang.Exception -> Lb5
            r1 = r6
        Lac:
            r9.close()     // Catch: java.io.IOException -> Ld5
        Laf:
            r10.close()     // Catch: java.io.IOException -> Ld5
            goto Ld5
        Lb3:
            r6 = move-exception
            goto Lb9
        Lb5:
            r6 = move-exception
            goto Lbd
        Lb7:
            r6 = move-exception
            r10 = r2
        Lb9:
            r2 = r9
            goto Ld7
        Lbb:
            r6 = move-exception
            r10 = r2
        Lbd:
            r2 = r9
            goto Lc4
        Lbf:
            r6 = move-exception
            r10 = r2
            goto Ld7
        Lc2:
            r6 = move-exception
            r10 = r2
        Lc4:
            java.lang.String r7 = com.asshow.asshow.b.d.f402a     // Catch: java.lang.Throwable -> Ld6
            java.lang.String r6 = r6.toString()     // Catch: java.lang.Throwable -> Ld6
            android.util.Log.e(r7, r6)     // Catch: java.lang.Throwable -> Ld6
            if (r2 == 0) goto Ld2
            r2.close()     // Catch: java.io.IOException -> Ld5
        Ld2:
            if (r10 == 0) goto Ld5
            goto Laf
        Ld5:
            return r1
        Ld6:
            r6 = move-exception
        Ld7:
            if (r2 == 0) goto Ldc
            r2.close()     // Catch: java.io.IOException -> Le1
        Ldc:
            if (r10 == 0) goto Le1
            r10.close()     // Catch: java.io.IOException -> Le1
        Le1:
            goto Le3
        Le2:
            throw r6
        Le3:
            goto Le2
        */
        throw new UnsupportedOperationException("Method not decompiled: com.asshow.asshow.b.d.a(android.content.Context, java.net.URL, java.lang.String, java.lang.String, java.lang.String):boolean");
    }

    private static byte[] a(String str) {
        int length = str.length();
        byte[] bArr = new byte[length / 2];
        for (int i = 0; i < length; i += 2) {
            bArr[i / 2] = (byte) ((Character.digit(str.charAt(i), 16) << 4) + Character.digit(str.charAt(i + 1), 16));
        }
        return bArr;
    }

    private static byte[] a(byte[] bArr, String str) {
        try {
            SecretKeySpec b = b(str);
            Cipher cipher = Cipher.getInstance("AES/CFB/NoPadding");
            cipher.init(2, b, new IvParameterSpec(new byte[cipher.getBlockSize()]));
            return cipher.doFinal(bArr);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    private static SecretKeySpec b(String str) {
        byte[] bArr;
        if (str == null) {
            str = "";
        }
        StringBuilder sb = new StringBuilder(32);
        while (true) {
            sb.append(str);
            if (sb.length() >= 32) {
                break;
            }
            str = "0";
        }
        if (sb.length() > 32) {
            sb.setLength(32);
        }
        try {
            bArr = sb.toString().getBytes(AESHelper.ENCODING);
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
            bArr = null;
        }
        return new SecretKeySpec(bArr, "AES");
    }
}
