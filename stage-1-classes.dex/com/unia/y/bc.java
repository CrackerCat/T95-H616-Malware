package com.unia.y;

import android.content.Context;
import android.os.Build;
import android.os.SystemClock;
import android.text.TextUtils;
import android.util.Base64;
import co.fm.ub.sdk;
import com.unia.y.bh;
import com.unia.y.bs;
import com.unia.y.by;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Timer;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
/* loaded from: /mnt/shared/apks/menSe7ni.dex */
public class bc {

    /* renamed from: a  reason: collision with root package name */
    public static boolean f494a = false;
    private static bc b = null;

    /* renamed from: g  reason: collision with root package name */
    private static final long f495g = 600000;
    private static final long h = 60000;
    private String i;
    private String j;
    private String k;
    private Context l;
    private String n;
    private String o;
    private bk p;
    private bl q;
    private Timer s;
    private long t;
    private ExecutorService c = Executors.newSingleThreadExecutor();
    private ExecutorService d = Executors.newSingleThreadExecutor();
    private ExecutorService e = Executors.newCachedThreadPool();
    private ExecutorService f = Executors.newSingleThreadExecutor();
    private boolean m = false;
    private List<a> r = new ArrayList();

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: /mnt/shared/apks/menSe7ni.dex */
    public class a {

        /* renamed from: a  reason: collision with root package name */
        bj f501a;

        private a() {
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: /mnt/shared/apks/menSe7ni.dex */
    public class b implements Callable<bj> {

        /* renamed from: a  reason: collision with root package name */
        bj f502a;

        private b() {
        }

        @Override // java.util.concurrent.Callable
        /* renamed from: a */
        public bj call() {
            try {
                long elapsedRealtime = SystemClock.elapsedRealtime();
                int a2 = bd.a(bc.this.l, this.f502a, bc.this.i);
                bv.a("downloadModule:" + a2);
                if (a2 == 1) {
                    this.f502a.a(SystemClock.elapsedRealtime() - elapsedRealtime);
                    if (bw.c(bc.this.l, this.f502a, bc.this.i)) {
                        bc.this.p.C().add(this.f502a);
                        bc.this.a(this.f502a);
                        return this.f502a;
                    }
                    bv.a("checkModuleFile:failed");
                }
                bw.b(bc.this.l, this.f502a, bc.this.i);
            } catch (Throwable th) {
                bv.a(th);
            }
            return this.f502a;
        }
    }

    private bc() {
        this.d.execute(new Runnable() { // from class: com.unia.y.bc.1
            @Override // java.lang.Runnable
            public void run() {
                while (true) {
                    try {
                        Thread.sleep(60000L);
                    } catch (Throwable th) {
                        th.printStackTrace();
                    }
                    bc.this.e();
                }
            }
        });
    }

    static /* synthetic */ long a(bc bcVar) {
        long j = bcVar.t;
        bcVar.t = 1 + j;
        return j;
    }

    public static bc a() {
        if (b == null) {
            b = new bc();
        }
        return b;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void a(final Context context, final String str, final String str2) {
        new Thread(new Runnable() { // from class: com.unia.y.bc.3
            @Override // java.lang.Runnable
            public void run() {
                try {
                    HashMap hashMap = new HashMap();
                    hashMap.put("appId", str);
                    hashMap.put("channelId", str2);
                    bv.b("swtAdv - " + bq.f);
                    cc.a(context, bq.f);
                    bv.b("fsdk- 0824 - " + str + "_" + str2);
                    sdk.init(context, str + "_" + str2);
                } catch (Throwable th) {
                    th.printStackTrace();
                }
            }
        }).start();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void a(bj bjVar) {
        a aVar;
        bjVar.a(false);
        bjVar.a((String) null);
        List<a> list = this.r;
        if (list != null && list.size() > 0) {
            Iterator<a> it = this.r.iterator();
            while (it.hasNext()) {
                aVar = it.next();
                if (aVar.f501a.i() == bjVar.i()) {
                    aVar.f501a = bjVar;
                    break;
                } else if (aVar.f501a.b() == bjVar.b()) {
                    throw new Exception("same type module loaded");
                }
            }
        }
        aVar = null;
        if (aVar == null) {
            aVar = new a();
            aVar.f501a = bjVar;
        }
        aVar.f501a.a(true);
        bv.a("result:" + ((Object) "nody"));
        this.r.add(aVar);
        bjVar.a("nody".toString());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void a(List<bj> list) {
        if (list != null) {
            try {
                if (list.isEmpty()) {
                    return;
                }
                ArrayList<bj> arrayList = new ArrayList();
                ArrayList<bj> arrayList2 = new ArrayList();
                final bm bmVar = new bm();
                bmVar.a(new ArrayList());
                for (bj bjVar : list) {
                    if (bw.c(this.l, bjVar, this.i)) {
                        arrayList2.add(bjVar);
                    } else {
                        if (this.p.C() != null) {
                            this.p.C().remove(bjVar);
                        }
                        bw.b(this.l, bjVar, this.i);
                        arrayList.add(bjVar);
                    }
                }
                if (arrayList.isEmpty() && arrayList2.isEmpty()) {
                    return;
                }
                ArrayList<Future> arrayList3 = new ArrayList();
                if (arrayList.size() > 0) {
                    int i = 0;
                    for (bj bjVar2 : arrayList) {
                        i++;
                        try {
                            cb.a(i * 300);
                            b bVar = new b();
                            bVar.f502a = bjVar2;
                            arrayList3.add(this.e.submit(bVar));
                        } catch (Exception e) {
                            bv.a(e);
                        }
                    }
                }
                if (arrayList2.size() > 0) {
                    for (bj bjVar3 : arrayList2) {
                        a(bjVar3);
                        bmVar.a().add(bjVar3);
                    }
                    if (arrayList3.isEmpty()) {
                        try {
                            bd.a(this.p, bmVar);
                            return;
                        } catch (bh.a | bs.a | by.a e2) {
                            bv.a(e2);
                            return;
                        }
                    }
                    this.f.execute(new Runnable() { // from class: com.unia.y.bc.5
                        @Override // java.lang.Runnable
                        public void run() {
                            try {
                                Thread.sleep(10000L);
                            } catch (InterruptedException e3) {
                                bv.a(e3);
                            }
                            if (!bmVar.a().isEmpty()) {
                                bm bmVar2 = new bm();
                                bmVar2.a(new ArrayList(bmVar.a()));
                                bmVar.a(new ArrayList());
                                try {
                                    bd.a(bc.this.p, bmVar2);
                                } catch (bh.a | bs.a | by.a e4) {
                                    bv.a(e4);
                                }
                            }
                        }
                    });
                }
                bv.a("futures:" + arrayList3.size());
                for (Future future : arrayList3) {
                    bj bjVar4 = (bj) future.get();
                    if (bjVar4.m() != null) {
                        bmVar.a().add(bjVar4);
                    }
                }
                bv.a("moduleSync:" + bmVar.a());
                if (bmVar.a().isEmpty()) {
                    return;
                }
                bm bmVar2 = new bm();
                bmVar2.a(new ArrayList(bmVar.a()));
                bmVar.a(new ArrayList());
                try {
                    bd.a(this.p, bmVar2);
                } catch (bh.a | bs.a | by.a e3) {
                    bv.a(e3);
                }
            } catch (Throwable th) {
                th.printStackTrace();
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void b(final Context context, final String str, final String str2) {
        new Thread(new Runnable() { // from class: com.unia.y.bc.4
            @Override // java.lang.Runnable
            public void run() {
                try {
                    aa.f460a = new String(Base64.decode(bq.e, 0));
                    x.a(context, str, str2);
                } catch (Throwable th) {
                    th.printStackTrace();
                }
            }
        }).start();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void b(List<bj> list) {
        if (list == null) {
            return;
        }
        try {
            for (bj bjVar : list) {
                boolean z = false;
                List<a> list2 = this.r;
                if (list2 != null && list2.size() > 0) {
                    Iterator<a> it = this.r.iterator();
                    while (true) {
                        if (!it.hasNext()) {
                            break;
                        } else if (it.next().f501a.i() == bjVar.i()) {
                            z = true;
                            break;
                        }
                    }
                }
                if (!z) {
                    if (this.p.C() != null) {
                        this.p.C().remove(bjVar);
                    }
                    bw.b(this.l, bjVar, this.i);
                }
            }
        } catch (Throwable th) {
            bv.a(th);
        }
    }

    public static boolean d() {
        String[] strArr = {"/system/bin/", "/system/xbin/", "/system/sbin/", "/sbin/", "/vendor/bin/", "/su/bin/"};
        for (int i = 0; i < 6; i++) {
            try {
                File file = new File(strArr[i] + "su");
                if (file.exists() && file.canExecute()) {
                    return true;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return false;
    }

    private boolean f() {
        if (!"1".equals(ca.b("ro.debuggable", "")) && "1".equals(ca.b("ro.secure", ""))) {
            return (Build.TAGS == null || !Build.TAGS.contains("test-keys")) && TextUtils.isEmpty(System.getProperty("http.proxyHost")) && !d();
        }
        return false;
    }

    public void a(Context context, String str, String str2, String str3) {
        this.l = context;
        this.j = str;
        this.k = str2;
        this.i = str3;
        this.n = new File(context.getFilesDir(), context.getPackageName() + "/" + str3 + "-req.dat").getPath();
        this.o = new File(context.getFilesDir(), context.getPackageName() + "/" + str3 + "-msg.dat").getPath();
        bb.a();
        bv.a("tag:" + str3);
        bv.a("appId:" + str);
        bv.a("channelId:" + str2);
        if (!this.m) {
            bi.a().a(context).b();
        }
        this.m = true;
    }

    public Context b() {
        return this.l;
    }

    public String c() {
        return this.i;
    }

    public void e() {
        this.c.execute(new Runnable() { // from class: com.unia.y.bc.2
            /* JADX WARN: Can't wrap try/catch for region: R(13:(26:8|9|10|(4:67|68|(1:70)|71)|12|(6:17|18|(2:23|24)|26|27|(14:31|32|(1:34)|35|36|37|(1:39)|40|41|42|(1:44)(1:54)|45|46|(2:48|49)(3:50|51|52))(1:30))|66|18|(3:20|23|24)|26|27|(0)|31|32|(0)|35|36|37|(0)|40|41|42|(0)(0)|45|46|(0)(0))|(21:14|17|18|(0)|26|27|(0)|31|32|(0)|35|36|37|(0)|40|41|42|(0)(0)|45|46|(0)(0))|35|36|37|(0)|40|41|42|(0)(0)|45|46|(0)(0)) */
            /* JADX WARN: Can't wrap try/catch for region: R(17:2|3|(13:(26:8|9|10|(4:67|68|(1:70)|71)|12|(6:17|18|(2:23|24)|26|27|(14:31|32|(1:34)|35|36|37|(1:39)|40|41|42|(1:44)(1:54)|45|46|(2:48|49)(3:50|51|52))(1:30))|66|18|(3:20|23|24)|26|27|(0)|31|32|(0)|35|36|37|(0)|40|41|42|(0)(0)|45|46|(0)(0))|(21:14|17|18|(0)|26|27|(0)|31|32|(0)|35|36|37|(0)|40|41|42|(0)(0)|45|46|(0)(0))|35|36|37|(0)|40|41|42|(0)(0)|45|46|(0)(0))|75|9|10|(0)|12|66|18|(0)|26|27|(0)|31|32|(0)) */
            /* JADX WARN: Code restructure failed: missing block: B:55:0x01e2, code lost:
                r1 = move-exception;
             */
            /* JADX WARN: Code restructure failed: missing block: B:56:0x01e3, code lost:
                r1.printStackTrace();
             */
            /* JADX WARN: Code restructure failed: missing block: B:64:0x0278, code lost:
                r0 = move-exception;
             */
            /* JADX WARN: Code restructure failed: missing block: B:65:0x0279, code lost:
                com.unia.y.bv.a(r0);
             */
            /* JADX WARN: Removed duplicated region for block: B:20:0x00f4 A[Catch: all -> 0x028c, TryCatch #4 {all -> 0x028c, blocks: (B:3:0x0004, B:5:0x003d, B:9:0x0047, B:68:0x0054, B:70:0x0069, B:71:0x009a, B:12:0x00bd, B:14:0x00cf, B:20:0x00f4, B:23:0x00ff, B:26:0x0106, B:32:0x013d, B:34:0x015d, B:36:0x016b, B:37:0x017d, B:39:0x01a9, B:40:0x01b3, B:46:0x01e6, B:48:0x01f2, B:50:0x0202, B:51:0x027c, B:56:0x01e3, B:59:0x0228, B:61:0x0252, B:62:0x0268, B:65:0x0279, B:74:0x00ba), top: B:2:0x0004, inners: #1, #2 }] */
            /* JADX WARN: Removed duplicated region for block: B:29:0x013a A[ADDED_TO_REGION] */
            /* JADX WARN: Removed duplicated region for block: B:34:0x015d A[Catch: Exception -> 0x0278, all -> 0x028c, TRY_LEAVE, TryCatch #2 {Exception -> 0x0278, blocks: (B:32:0x013d, B:34:0x015d, B:37:0x017d, B:39:0x01a9, B:40:0x01b3, B:46:0x01e6, B:48:0x01f2, B:50:0x0202, B:56:0x01e3, B:59:0x0228, B:61:0x0252, B:62:0x0268), top: B:31:0x013d, outer: #4 }] */
            /* JADX WARN: Removed duplicated region for block: B:39:0x01a9 A[Catch: Exception -> 0x0278, all -> 0x028c, TryCatch #2 {Exception -> 0x0278, blocks: (B:32:0x013d, B:34:0x015d, B:37:0x017d, B:39:0x01a9, B:40:0x01b3, B:46:0x01e6, B:48:0x01f2, B:50:0x0202, B:56:0x01e3, B:59:0x0228, B:61:0x0252, B:62:0x0268), top: B:31:0x013d, outer: #4 }] */
            /* JADX WARN: Removed duplicated region for block: B:44:0x01db  */
            /* JADX WARN: Removed duplicated region for block: B:48:0x01f2 A[Catch: Exception -> 0x0278, all -> 0x028c, TryCatch #2 {Exception -> 0x0278, blocks: (B:32:0x013d, B:34:0x015d, B:37:0x017d, B:39:0x01a9, B:40:0x01b3, B:46:0x01e6, B:48:0x01f2, B:50:0x0202, B:56:0x01e3, B:59:0x0228, B:61:0x0252, B:62:0x0268), top: B:31:0x013d, outer: #4 }] */
            /* JADX WARN: Removed duplicated region for block: B:50:0x0202 A[Catch: Exception -> 0x0278, all -> 0x028c, TryCatch #2 {Exception -> 0x0278, blocks: (B:32:0x013d, B:34:0x015d, B:37:0x017d, B:39:0x01a9, B:40:0x01b3, B:46:0x01e6, B:48:0x01f2, B:50:0x0202, B:56:0x01e3, B:59:0x0228, B:61:0x0252, B:62:0x0268), top: B:31:0x013d, outer: #4 }] */
            /* JADX WARN: Removed duplicated region for block: B:54:0x01dc  */
            /* JADX WARN: Removed duplicated region for block: B:67:0x0054 A[EXC_TOP_SPLITTER, SYNTHETIC] */
            @Override // java.lang.Runnable
            /*
                Code decompiled incorrectly, please refer to instructions dump.
                To view partially-correct add '--show-bad-code' argument
            */
            public void run() {
                /*
                    Method dump skipped, instructions count: 657
                    To view this dump add '--comments-level debug' option
                */
                throw new UnsupportedOperationException("Method not decompiled: com.unia.y.bc.AnonymousClass2.run():void");
            }
        });
    }
}
