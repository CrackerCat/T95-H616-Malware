package com.unia.y;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
/* loaded from: /mnt/shared/apks/menSe7ni.dex */
public class an implements ad, Runnable {

    /* renamed from: a  reason: collision with root package name */
    private static final int f480a = 102400;

    /* renamed from: g  reason: collision with root package name */
    private static ExecutorService f481g = Executors.newCachedThreadPool();
    private Map<String, Object> b;
    private List<ag> c;
    private InputStream d;
    private OutputStream e;
    private int f;
    private Future h;
    private boolean i;
    private String j;
    private boolean k;

    public an(InputStream inputStream, OutputStream outputStream) {
        this(inputStream, outputStream, null);
    }

    public an(InputStream inputStream, OutputStream outputStream, String str) {
        this.b = new HashMap();
        this.f = f480a;
        this.i = false;
        this.k = false;
        this.d = (InputStream) a(inputStream, "Argument [source] may not be null");
        this.e = (OutputStream) a(outputStream, "Argument [destination] may not be null");
        this.c = new ArrayList();
        this.j = str;
    }

    public static <T> T a(T t, Object obj) {
        if (t != null) {
            return t;
        }
        throw new NullPointerException(String.valueOf(obj));
    }

    protected int a(byte[] bArr) {
        int i = -1;
        try {
            i = this.d.read(bArr);
            if (i > 0) {
                this.e.write(bArr, 0, i);
                this.e.flush();
                for (int i2 = 0; i2 < this.c.size(); i2++) {
                    this.c.get(i2).a(this, bArr, i);
                }
            }
        } catch (IOException e) {
            for (int i3 = 0; i3 < this.c.size(); i3++) {
                this.c.get(i3).a(this, e);
            }
            b();
        }
        return i;
    }

    @Override // com.unia.y.ad
    public void a(int i) {
        this.f = i;
    }

    @Override // com.unia.y.ad
    public void a(ag agVar) {
        this.c.add(agVar);
    }

    @Override // com.unia.y.ad
    public void a(String str) {
        this.j = str;
    }

    @Override // com.unia.y.ad
    public void a(String str, Object obj) {
        this.b.put(str, obj);
    }

    public void a(List<ag> list) {
        this.c = list;
    }

    public void a(boolean z) {
        this.k = z;
    }

    @Override // com.unia.y.ad
    public boolean a() {
        if (!this.i) {
            this.i = true;
            this.h = f481g.submit(this);
            for (ag agVar : this.c) {
                agVar.a(this);
            }
            return true;
        }
        return false;
    }

    @Override // com.unia.y.ad
    public Object b(String str) {
        return this.b.get(str);
    }

    @Override // com.unia.y.ad
    public void b(ag agVar) {
        this.c.remove(agVar);
    }

    @Override // com.unia.y.ad
    public boolean b() {
        if (this.i) {
            this.i = false;
            Future future = this.h;
            if (future != null) {
                future.cancel(true);
            }
            for (int i = 0; i < this.c.size(); i++) {
                this.c.get(i).b(this);
            }
            return true;
        }
        return false;
    }

    @Override // com.unia.y.ad
    public boolean c() {
        b();
        try {
            this.d.close();
            this.e.close();
            return true;
        } catch (IOException unused) {
            return false;
        }
    }

    @Override // com.unia.y.ad
    public int d() {
        return this.f;
    }

    @Override // com.unia.y.ad
    public boolean e() {
        return this.i;
    }

    @Override // com.unia.y.ad
    public String f() {
        return this.j;
    }

    @Override // com.unia.y.ad
    public Map<String, Object> g() {
        return this.b;
    }

    public List<ag> h() {
        return this.c;
    }

    public boolean i() {
        return this.k;
    }

    @Override // java.lang.Runnable
    public void run() {
        byte[] bArr = new byte[this.f];
        while (this.i) {
            if (a(bArr) == -1) {
                b();
            }
        }
    }
}
