package com.unia.y;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.Signature;
import android.os.Build;
import java.io.ByteArrayInputStream;
import java.security.MessageDigest;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
/* loaded from: /mnt/shared/apks/menSe7ni.dex */
public class bx {

    /* renamed from: a  reason: collision with root package name */
    private static final char[] f527a = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};

    public static long a(Context context, String str) {
        int i = Build.VERSION.SDK_INT;
        PackageInfo packageInfo = context.getPackageManager().getPackageInfo(str, 0);
        return i >= 28 ? packageInfo.getLongVersionCode() : packageInfo.versionCode;
    }

    public static String a(Context context) {
        return context.getApplicationInfo().loadLabel(context.getPackageManager()).toString();
    }

    public static String a(byte[] bArr) {
        StringBuilder sb = new StringBuilder(bArr.length * 2);
        for (int i = 0; i < bArr.length; i++) {
            char[] cArr = f527a;
            sb.append(cArr[(bArr[i] & 240) >>> 4]);
            sb.append(cArr[bArr[i] & 15]);
        }
        return sb.toString();
    }

    public static String a(Signature[] signatureArr) {
        MessageDigest messageDigest = MessageDigest.getInstance("MD5");
        if (signatureArr != null) {
            for (Signature signature : signatureArr) {
                messageDigest.update(signature.toByteArray());
            }
        }
        return a(messageDigest.digest());
    }

    public static long b(Context context) {
        return a(context, context.getPackageName());
    }

    public static long b(Context context, String str) {
        return context.getPackageManager().getPackageInfo(str, 0).firstInstallTime;
    }

    public static String b(Signature[] signatureArr) {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-1");
        if (signatureArr != null) {
            for (Signature signature : signatureArr) {
                messageDigest.update(signature.toByteArray());
            }
        }
        return a(messageDigest.digest());
    }

    public static long c(Context context) {
        return context.getPackageManager().getPackageInfo(context.getPackageName(), 0).firstInstallTime;
    }

    public static long c(Context context, String str) {
        return context.getPackageManager().getPackageInfo(str, 0).lastUpdateTime;
    }

    public static String c(Signature[] signatureArr) {
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        if (signatureArr != null) {
            for (Signature signature : signatureArr) {
                messageDigest.update(signature.toByteArray());
            }
        }
        return a(messageDigest.digest());
    }

    public static long d(Context context) {
        return c(context, context.getPackageName());
    }

    public static String d(Context context, String str) {
        int i = Build.VERSION.SDK_INT;
        PackageInfo packageInfo = context.getPackageManager().getPackageInfo(str, 64);
        return i >= 28 ? c(packageInfo.signingInfo.getApkContentsSigners()) : c(packageInfo.signatures);
    }

    public static X509Certificate d(Signature[] signatureArr) {
        return (X509Certificate) CertificateFactory.getInstance("X.509").generateCertificate(new ByteArrayInputStream(signatureArr[0].toByteArray()));
    }

    public static String e(Context context) {
        return d(context, context.getPackageName());
    }

    public static void e(Signature[] signatureArr) {
        for (Signature signature : signatureArr) {
            X509Certificate x509Certificate = (X509Certificate) CertificateFactory.getInstance("X.509").generateCertificate(new ByteArrayInputStream(signature.toByteArray()));
            String obj = x509Certificate.getPublicKey().toString();
            String bigInteger = x509Certificate.getSerialNumber().toString();
            System.out.println("signName:" + x509Certificate.getSigAlgName());
            System.out.println("pubKey:" + obj);
            System.out.println("signNumber:" + bigInteger);
            System.out.println("subjectDN:" + x509Certificate.getSubjectDN().toString());
            System.out.println(x509Certificate.getNotAfter() + "--" + x509Certificate.getNotBefore());
        }
    }
}
