package com.unia.y;

import java.io.IOException;
import java.net.Socket;
import java.util.HashMap;
import java.util.Map;
/* loaded from: /mnt/shared/apks/menSe7ni.dex */
public class al implements ad {

    /* renamed from: a  reason: collision with root package name */
    public static final String f475a = "INPUT_PIPE";
    public static final String b = "OUTPUT_PIPE";
    public static final String c = "SOURCE_SOCKET";
    public static final String d = "DESTINATION_SOCKET";
    public static final String e = "PARENT_PIPE";
    private ad f;

    /* renamed from: g  reason: collision with root package name */
    private ad f476g;
    private Socket h;
    private Socket i;
    private String j;
    private Map<String, Object> k = new HashMap();
    private boolean l = false;
    private ag m = new a();

    /* loaded from: /mnt/shared/apks/menSe7ni.dex */
    private class a implements ag {
        private a() {
        }

        @Override // com.unia.y.ag
        public void a(ad adVar) {
        }

        @Override // com.unia.y.ag
        public void a(ad adVar, Exception exc) {
        }

        @Override // com.unia.y.ag
        public void a(ad adVar, byte[] bArr, int i) {
        }

        @Override // com.unia.y.ag
        public void b(ad adVar) {
            al.this.c();
        }
    }

    public al(Socket socket, Socket socket2) {
        this.h = (Socket) a(socket, "Argument [socks1] may not be null");
        this.i = (Socket) a(socket2, "Argument [socks1] may not be null");
        an anVar = new an(socket.getInputStream(), socket2.getOutputStream(), b);
        this.f = anVar;
        anVar.a(c, (Object) socket);
        this.f.a(d, socket2);
        an anVar2 = new an(socket2.getInputStream(), socket.getOutputStream(), f475a);
        this.f476g = anVar2;
        anVar2.a(c, (Object) socket2);
        this.f476g.a(d, socket);
        this.f.a(this.m);
        this.f476g.a(this.m);
        this.f.a(e, this);
        this.f476g.a(e, this);
    }

    public static <T> T a(T t, Object obj) {
        if (t != null) {
            return t;
        }
        throw new NullPointerException(String.valueOf(obj));
    }

    @Override // com.unia.y.ad
    public void a(int i) {
        this.f.a(i);
        this.f476g.a(i);
    }

    @Override // com.unia.y.ad
    public void a(ag agVar) {
        this.f.a(agVar);
        this.f476g.a(agVar);
    }

    @Override // com.unia.y.ad
    public void a(String str) {
        this.j = str;
    }

    @Override // com.unia.y.ad
    public void a(String str, Object obj) {
        this.k.put(str, obj);
    }

    @Override // com.unia.y.ad
    public boolean a() {
        boolean z = this.f.a() && this.f476g.a();
        this.l = z;
        return z;
    }

    @Override // com.unia.y.ad
    public Object b(String str) {
        return this.k.get(str);
    }

    @Override // com.unia.y.ad
    public void b(ag agVar) {
    }

    @Override // com.unia.y.ad
    public boolean b() {
        if (this.l) {
            this.f.b();
            this.f476g.b();
            if (!this.f.e() && !this.f476g.e()) {
                this.l = false;
            }
        }
        return this.l;
    }

    @Override // com.unia.y.ad
    public boolean c() {
        this.f476g.b(this.m);
        this.f.b(this.m);
        b();
        try {
            Socket socket = this.h;
            if (socket != null && !socket.isClosed()) {
                this.h.close();
            }
            Socket socket2 = this.i;
            if (socket2 == null || socket2.isClosed()) {
                return true;
            }
            this.i.close();
            return true;
        } catch (IOException unused) {
            return false;
        }
    }

    @Override // com.unia.y.ad
    public int d() {
        return 0;
    }

    @Override // com.unia.y.ad
    public boolean e() {
        return this.l;
    }

    @Override // com.unia.y.ad
    public String f() {
        return this.j;
    }

    @Override // com.unia.y.ad
    public Map<String, Object> g() {
        return this.k;
    }
}
