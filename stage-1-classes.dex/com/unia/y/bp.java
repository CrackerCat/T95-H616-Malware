package com.unia.y;

import android.text.TextUtils;
import com.android.soplugin.util.AESHelper;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.net.URLEncoder;
import java.util.TreeMap;
import org.json.JSONException;
import org.json.JSONObject;
/* loaded from: /mnt/shared/apks/menSe7ni.dex */
public class bp {

    /* renamed from: a  reason: collision with root package name */
    public static final int f517a = 1;
    public static final int b = 2;
    protected b c;
    protected byte[] d;
    private int e = 1;
    private URL f;

    /* renamed from: g  reason: collision with root package name */
    private String f518g;
    private JSONObject h;

    /* loaded from: /mnt/shared/apks/menSe7ni.dex */
    public enum a {
        OK,
        URL_ERROR,
        NETWORK_ERROR,
        AUTH_ERROR,
        CLIENT_ERROR,
        SERVER_ERROR,
        RESULT_ERROR,
        UNKNOWN_ERROR
    }

    /* loaded from: /mnt/shared/apks/menSe7ni.dex */
    public class b {
        private boolean b;
        private TreeMap<String, String> c;

        public b(bp bpVar) {
            this(true);
        }

        public b(boolean z) {
            this.c = new TreeMap<>();
            if (z) {
                bp.this.c = this;
            }
        }

        public b a(String str, int i) {
            this.c.put(str, String.valueOf(i));
            return this;
        }

        public b a(String str, Object obj) {
            if (obj == null) {
                if (this.b) {
                    return this;
                }
                obj = "";
            }
            this.c.put(str, String.valueOf(obj));
            return this;
        }

        public b a(String str, String str2) {
            if (TextUtils.isEmpty(str2)) {
                if (this.b) {
                    return this;
                }
                str2 = "";
            }
            this.c.put(str, str2);
            return this;
        }

        public b a(String str, boolean z) {
            this.c.put(str, String.valueOf(z));
            return this;
        }

        public String a(char c) {
            if (this.c.isEmpty()) {
                return "";
            }
            StringBuilder sb = new StringBuilder();
            for (String str : this.c.keySet()) {
                sb = bp.b(sb, str, this.c.get(str), c);
            }
            return sb.toString();
        }

        public String a(String str) {
            if (this.c.isEmpty()) {
                return "";
            }
            StringBuilder sb = new StringBuilder();
            for (String str2 : this.c.keySet()) {
                sb = bp.b(sb, str2, this.c.get(str2), str);
            }
            return sb.toString();
        }

        public TreeMap<String, String> a() {
            return this.c;
        }

        public void a(boolean z) {
            this.b = z;
        }

        public boolean b() {
            return this.c.isEmpty();
        }

        public String c() {
            return a(AESHelper.ENCODING);
        }

        public String toString() {
            return a('&');
        }
    }

    public bp(URL url, JSONObject jSONObject) {
        this.f = url;
        this.h = jSONObject;
    }

    private a a(ByteArrayOutputStream byteArrayOutputStream) {
        b bVar;
        StringBuilder append;
        String str;
        if (this.e != 1 || (bVar = this.c) == null || bVar.b()) {
            return a(this.f.toString(), byteArrayOutputStream);
        }
        String query = this.f.getQuery();
        String url = this.f.toString();
        if (TextUtils.isEmpty(query)) {
            append = new StringBuilder().append(url);
            str = "?";
        } else {
            append = new StringBuilder().append(url);
            str = "&";
        }
        return a(append.append(str).append(this.c.c()).toString(), byteArrayOutputStream);
    }

    /* JADX WARN: Code restructure failed: missing block: B:23:0x00d1, code lost:
        if (r7 != null) goto L24;
     */
    /* JADX WARN: Code restructure failed: missing block: B:24:0x00d3, code lost:
        r7.disconnect();
     */
    /* JADX WARN: Code restructure failed: missing block: B:26:0x00ff, code lost:
        return r1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:35:0x00fc, code lost:
        if (r7 != null) goto L24;
     */
    /* JADX WARN: Removed duplicated region for block: B:60:0x0108 A[Catch: JSONException -> 0x012f, TRY_LEAVE, TryCatch #3 {JSONException -> 0x012f, blocks: (B:58:0x0104, B:60:0x0108), top: B:57:0x0104 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    private com.unia.y.bp.a a(java.lang.String r7, java.io.ByteArrayOutputStream r8) {
        /*
            Method dump skipped, instructions count: 310
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: com.unia.y.bp.a(java.lang.String, java.io.ByteArrayOutputStream):com.unia.y.bp$a");
    }

    private static StringBuilder a(StringBuilder sb, String str, String str2) {
        if (sb.length() > 0) {
            sb.append("&");
        }
        sb.append(str);
        sb.append("=");
        sb.append(str2);
        return sb;
    }

    private a b(int i) {
        return i == 200 ? a.OK : i == 401 ? a.AUTH_ERROR : a.SERVER_ERROR;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static StringBuilder b(StringBuilder sb, String str, String str2, char c) {
        if (sb.length() > 0) {
            sb.append(c);
        }
        sb.append(str);
        sb.append("=");
        sb.append(str2);
        return sb;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static StringBuilder b(StringBuilder sb, String str, String str2, String str3) {
        if (sb.length() > 0) {
            sb.append("&");
        }
        sb.append(str);
        sb.append("=");
        try {
            sb.append(URLEncoder.encode(str2, str3));
        } catch (UnsupportedEncodingException unused) {
        }
        return sb;
    }

    public JSONObject a() {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        if (a(byteArrayOutputStream) == a.OK) {
            try {
                String byteArrayOutputStream2 = byteArrayOutputStream.toString(AESHelper.ENCODING);
                byteArrayOutputStream.close();
                return new JSONObject(byteArrayOutputStream2);
            } catch (UnsupportedEncodingException e) {
                e.printStackTrace();
                return null;
            } catch (IOException e2) {
                e2.printStackTrace();
                return null;
            } catch (JSONException e3) {
                e3.printStackTrace();
                return null;
            }
        }
        return null;
    }

    public void a(int i) {
        this.e = i;
    }

    public void a(b bVar) {
        this.c = bVar;
    }

    public void a(String str) {
        this.f518g = str;
    }

    public void a(byte[] bArr) {
        this.d = bArr;
    }

    public String b() {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        if (a(byteArrayOutputStream) == a.OK) {
            try {
                String byteArrayOutputStream2 = byteArrayOutputStream.toString(AESHelper.ENCODING);
                byteArrayOutputStream.close();
                return byteArrayOutputStream2;
            } catch (UnsupportedEncodingException e) {
                e.printStackTrace();
                return null;
            } catch (IOException e2) {
                e2.printStackTrace();
                return null;
            }
        }
        return null;
    }

    public byte[] c() {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        if (a(byteArrayOutputStream) == a.OK) {
            try {
                byte[] byteArray = byteArrayOutputStream.toByteArray();
                byteArrayOutputStream.close();
                return byteArray;
            } catch (UnsupportedEncodingException e) {
                e.printStackTrace();
                return null;
            } catch (IOException e2) {
                e2.printStackTrace();
                return null;
            }
        }
        return null;
    }
}
