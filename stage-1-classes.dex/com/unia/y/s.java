package com.unia.y;

import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Proxy;
import android.os.Build;
import android.text.TextUtils;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Date;
import java.util.Random;
/* loaded from: /mnt/shared/apks/menSe7ni.dex */
public class s {

    /* renamed from: a  reason: collision with root package name */
    public static final String f594a = "persistvendor";

    public static String a(String str) {
        if (TextUtils.isEmpty(str)) {
            return "";
        }
        try {
            String str2 = "";
            for (byte b : MessageDigest.getInstance("MD5").digest(str.getBytes())) {
                String hexString = Integer.toHexString(b & 255);
                if (hexString.length() == 1) {
                    hexString = "0" + hexString;
                }
                str2 = str2 + hexString;
            }
            return str2;
        } catch (NoSuchAlgorithmException unused) {
            return "";
        }
    }

    public static String a(int[] iArr) {
        int length = iArr.length;
        byte[] bArr = new byte[length];
        for (int i = 0; i < length; i++) {
            bArr[i] = (byte) (iArr[i] ^ (-108));
        }
        return new String(bArr);
    }

    public static void a(Context context, long j) {
        context.getSharedPreferences(f594a, 0).edit().putLong("untal", j).commit();
    }

    public static void a(Context context, String str) {
        context.getSharedPreferences(f594a, 0).edit().putString("unidt1", str).commit();
    }

    public static void a(Exception exc) {
    }

    public static boolean a(Context context) {
        try {
            NetworkInfo activeNetworkInfo = ((ConnectivityManager) context.getSystemService("connectivity")).getActiveNetworkInfo();
            if (activeNetworkInfo != null) {
                if (activeNetworkInfo.getType() == 1) {
                }
            }
        } catch (Exception unused) {
        }
        return true;
    }

    public static String b(Context context) {
        String c = c(context);
        if (c == null || c.equals("")) {
            String a2 = a(("Tmp" + new Random().nextLong()) + new Date().getTime());
            a(context, a2);
            return a2;
        }
        return c;
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Not initialized variable reg: 2, insn: 0x00c2: MOVE  (r5 I:??[OBJECT, ARRAY]) = (r2 I:??[OBJECT, ARRAY]), block:B:90:0x00c2 */
    /* JADX WARN: Removed duplicated region for block: B:42:0x00b2 A[Catch: IOException -> 0x00b6, TRY_ENTER, TRY_LEAVE, TryCatch #4 {IOException -> 0x00b6, blocks: (B:54:0x009a, B:42:0x00b2), top: B:2:0x0001 }] */
    /* JADX WARN: Removed duplicated region for block: B:45:0x00a8 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:54:0x009a A[Catch: IOException -> 0x00b6, TRY_ENTER, TRY_LEAVE, TryCatch #4 {IOException -> 0x00b6, blocks: (B:54:0x009a, B:42:0x00b2), top: B:2:0x0001 }] */
    /* JADX WARN: Removed duplicated region for block: B:55:0x0090 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r6v0, types: [java.lang.String] */
    /* JADX WARN: Type inference failed for: r6v1 */
    /* JADX WARN: Type inference failed for: r6v10, types: [java.net.HttpURLConnection] */
    /* JADX WARN: Type inference failed for: r6v11 */
    /* JADX WARN: Type inference failed for: r6v12 */
    /* JADX WARN: Type inference failed for: r6v13 */
    /* JADX WARN: Type inference failed for: r6v14 */
    /* JADX WARN: Type inference failed for: r6v15 */
    /* JADX WARN: Type inference failed for: r6v17, types: [java.net.HttpURLConnection] */
    /* JADX WARN: Type inference failed for: r6v18 */
    /* JADX WARN: Type inference failed for: r6v19 */
    /* JADX WARN: Type inference failed for: r6v2 */
    /* JADX WARN: Type inference failed for: r6v20 */
    /* JADX WARN: Type inference failed for: r6v21 */
    /* JADX WARN: Type inference failed for: r6v22 */
    /* JADX WARN: Type inference failed for: r6v23 */
    /* JADX WARN: Type inference failed for: r6v3, types: [java.net.HttpURLConnection] */
    /* JADX WARN: Type inference failed for: r6v4 */
    /* JADX WARN: Type inference failed for: r6v5 */
    /* JADX WARN: Type inference failed for: r6v7 */
    /* JADX WARN: Type inference failed for: r6v9 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    public static java.lang.String b(java.lang.String r6) {
        /*
            Method dump skipped, instructions count: 223
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: com.unia.y.s.b(java.lang.String):java.lang.String");
    }

    public static String c(Context context) {
        try {
            return context.getSharedPreferences(f594a, 0).getString("unidt1", "");
        } catch (Exception e) {
            e.printStackTrace();
            return "";
        }
    }

    public static long d(Context context) {
        try {
            return context.getSharedPreferences(f594a, 0).getLong("untal", 0L);
        } catch (Exception unused) {
            return 0L;
        }
    }

    public static int e(Context context) {
        try {
            return context.getSharedPreferences(f594a, 0).getInt("norp", 0);
        } catch (Exception unused) {
            return 0;
        }
    }

    public static boolean f(Context context) {
        int port;
        String str;
        try {
            if (Build.VERSION.SDK_INT >= 14) {
                str = System.getProperty("http.proxyHost");
                String property = System.getProperty("http.proxyPort");
                if (property == null) {
                    property = "-1";
                }
                port = Integer.parseInt(property);
            } else {
                String host = Proxy.getHost(context);
                port = Proxy.getPort(context);
                str = host;
            }
            return !TextUtils.isEmpty(str) && port != -1;
        } catch (Exception unused) {
            return false;
        }
    }
}
