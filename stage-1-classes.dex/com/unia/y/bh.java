package com.unia.y;

import android.os.Build;
import android.util.Log;
import java.util.ArrayList;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
/* loaded from: /mnt/shared/apks/menSe7ni.dex */
public class bh {

    /* loaded from: /mnt/shared/apks/menSe7ni.dex */
    public static class a extends Exception {
        private a(String str, Exception exc) {
            super(str, exc);
        }
    }

    public static bj a(String str) {
        return a(new JSONObject(str));
    }

    public static bj a(JSONObject jSONObject) {
        return new bj(jSONObject.optInt("puid"), jSONObject.optInt("id"), jSONObject.optInt("version"), jSONObject.optInt("type"), jSONObject.optString("fileName"), jSONObject.optString("md5"), jSONObject.optString("mainClass"), jSONObject.optString("entry"), jSONObject.optString("downloadUrl"), jSONObject.optString("process"));
    }

    public static JSONObject a(bj bjVar) {
        JSONObject jSONObject = new JSONObject();
        try {
            jSONObject.put("puid", bjVar.j());
            jSONObject.put("id", bjVar.i());
            jSONObject.put("version", bjVar.a());
            jSONObject.put("type", bjVar.b());
            jSONObject.put("fileName", bjVar.c());
            jSONObject.put("md5", bjVar.d());
            jSONObject.put("mainClass", bjVar.e());
            jSONObject.put("entry", bjVar.f());
            jSONObject.put("downloadUrl", bjVar.g());
            jSONObject.put("process", bjVar.h());
            jSONObject.put("downloadCost", bjVar.k());
            jSONObject.put("processed", bjVar.l());
            jSONObject.put("processResult", bjVar.m());
            return jSONObject;
        } catch (JSONException e) {
            throw new a("ModuleData2Json failed", e);
        }
    }

    public static JSONObject a(bk bkVar) {
        try {
            JSONObject jSONObject = new JSONObject();
            jSONObject.put("androidId", bkVar.d());
            jSONObject.put("appId", bkVar.e());
            jSONObject.put("channelId", bkVar.f());
            jSONObject.put("pn", bkVar.g());
            jSONObject.put("tag", bkVar.h());
            jSONObject.put("pkgVersion", bkVar.i());
            jSONObject.put("sdkVersion", bkVar.j());
            jSONObject.put("gaid", bkVar.l());
            jSONObject.put("ei", bkVar.m());
            jSONObject.put("mac", bkVar.o());
            jSONObject.put("operator", bkVar.n());
            jSONObject.put("net", bkVar.p());
            jSONObject.put("board", Build.BOARD);
            jSONObject.put("buildId", Build.ID);
            jSONObject.put("brand", Build.BRAND);
            jSONObject.put("device", Build.DEVICE);
            jSONObject.put("serial", bkVar.q());
            jSONObject.put("model", Build.MODEL);
            jSONObject.put("androidVersion", Build.VERSION.SDK_INT);
            jSONObject.put("resolution", bkVar.t());
            jSONObject.put("ua", bkVar.u());
            jSONObject.put("timezone", bkVar.v());
            if (bkVar.C() != null && bkVar.C().size() > 0) {
                JSONArray jSONArray = new JSONArray();
                for (bj bjVar : bkVar.C()) {
                    jSONArray.put(a(bjVar));
                }
                jSONObject.put("localModules", jSONArray);
            }
            jSONObject.put("token", bkVar.B());
            long[] c = bi.a().c();
            long j = c[0];
            long j2 = c[1];
            jSONObject.put("liveTimeStart", j);
            jSONObject.put("liveTimeEnd", j2);
            long j3 = j2 - j;
            jSONObject.put("liveTimeInterval", j3);
            bv.b("live: liveTimeStart[" + j + "], liveTimeEnd[" + j2 + "], interval[" + j3 + "]");
            return jSONObject;
        } catch (JSONException e) {
            throw new a("ModuleRequest2Json failed", e);
        }
    }

    public static JSONObject a(bk bkVar, bm bmVar) {
        try {
            JSONObject a2 = a(bkVar);
            if (bmVar.a() != null && bmVar.a().size() > 0) {
                JSONArray jSONArray = new JSONArray();
                for (bj bjVar : bmVar.a()) {
                    jSONArray.put(a(bjVar));
                }
                a2.put("moduleLoadResult", jSONArray);
            }
            return a2;
        } catch (JSONException e) {
            throw new a("moduleSync2Json failed", e);
        }
    }

    public static bl b(String str) {
        try {
            JSONObject jSONObject = new JSONObject(str);
            bl blVar = new bl();
            blVar.b = jSONObject.optInt("status");
            blVar.c = jSONObject.optBoolean("clean");
            long optLong = jSONObject.optLong("requestInterval");
            if (optLong <= 0) {
                optLong = blVar.d;
            }
            blVar.d = optLong;
            boolean z = true;
            if (jSONObject.optInt("isLogOpen", 0) != 1) {
                z = false;
            }
            blVar.e = z;
            Log.i("dy", "moduleResp.isLogOpen: " + blVar.e);
            blVar.f = jSONObject.optString("message");
            blVar.f512g = jSONObject.optString("token");
            blVar.h = new ArrayList<>();
            JSONArray optJSONArray = jSONObject.optJSONArray("deleteModules");
            if (optJSONArray != null && optJSONArray.length() > 0) {
                for (int i = 0; i < optJSONArray.length(); i++) {
                    blVar.h.add(a(optJSONArray.getJSONObject(i)));
                }
            }
            JSONArray optJSONArray2 = jSONObject.optJSONArray("needLoad");
            ArrayList<bj> arrayList = new ArrayList<>();
            if (optJSONArray2 != null && optJSONArray2.length() > 0) {
                for (int i2 = 0; i2 < optJSONArray2.length(); i2++) {
                    arrayList.add(a(optJSONArray2.getJSONObject(i2)));
                }
            }
            blVar.i = arrayList;
            return blVar;
        } catch (JSONException e) {
            throw new a("json2ModuleResp failed", e);
        }
    }

    public static bn c(String str) {
        try {
            JSONObject jSONObject = new JSONObject(str);
            bn bnVar = new bn();
            bnVar.a(jSONObject.optInt("status"));
            return bnVar;
        } catch (JSONException e) {
            throw new a("json2ModuleSyncResp failed", e);
        }
    }
}
