package com.unia.y;

import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
/* loaded from: /mnt/shared/apks/menSe7ni.dex */
public class ah {

    /* renamed from: a  reason: collision with root package name */
    public static final byte f467a = 1;
    public static final byte b = 2;
    public static final byte c = 1;
    public static final byte d = 2;
    public static final int e = 1;
    public static final int f = 2;

    /* renamed from: g  reason: collision with root package name */
    private static final byte[] f468g;
    private static final byte[] h;
    private static final byte[] i = "RE".getBytes();
    private static final byte[] j = "SP".getBytes();
    private static final int l;
    private byte[] k;
    private byte[] m;
    private int n;
    private byte[] o;
    private int p;
    private int q;
    private long r;
    private byte s = 1;
    private byte t = 1;
    private int u = 1;
    private String v;

    static {
        byte[] bytes = "IN".getBytes();
        f468g = bytes;
        byte[] bytes2 = "PUT".getBytes();
        h = bytes2;
        l = bytes.length + 16 + 8 + bytes2.length;
    }

    public static ah a(InputStream inputStream) {
        byte[] bArr = new byte[4];
        if (inputStream.read(bArr) != 4) {
            return null;
        }
        int i2 = i(bArr);
        ah ahVar = new ah();
        byte[] bArr2 = new byte[i2];
        ahVar.k = bArr2;
        if (inputStream.read(bArr2) != i2) {
            return null;
        }
        ahVar.d();
        return ahVar;
    }

    public static String a(byte[] bArr) {
        StringBuffer stringBuffer = new StringBuffer();
        stringBuffer.append(bArr[0] & 255);
        stringBuffer.append(".");
        stringBuffer.append(bArr[1] & 255);
        stringBuffer.append(".");
        stringBuffer.append(bArr[2] & 255);
        stringBuffer.append(".");
        stringBuffer.append(bArr[3] & 255);
        return stringBuffer.toString();
    }

    private static byte[] a(int i2) {
        return new byte[]{(byte) ((i2 >> 24) & 255), (byte) ((i2 >> 16) & 255), (byte) ((i2 >> 8) & 255), (byte) (i2 & 255)};
    }

    private void b(byte[] bArr) {
        int i2;
        int length = f468g.length;
        byte[] bArr2 = new byte[8];
        System.arraycopy(bArr, length, bArr2, 0, 8);
        this.r = j(bArr2);
        int i3 = length + 8;
        if (bArr.length != l) {
            this.t = bArr[i3];
            this.u = 2;
            int i4 = i3 + 1;
            this.s = bArr[i4];
            i3 = i4 + 1;
        }
        byte[] bArr3 = new byte[4];
        this.m = bArr3;
        System.arraycopy(bArr, i3, bArr3, 0, 4);
        int i5 = i3 + 4;
        byte[] bArr4 = new byte[4];
        System.arraycopy(bArr, i5, bArr4, 0, 4);
        this.n = i(bArr4);
        int i6 = i5 + 4;
        if (this.u != 2) {
            byte[] bArr5 = new byte[4];
            this.o = bArr5;
            System.arraycopy(bArr, i6, bArr5, 0, 4);
        } else if (this.s != 1) {
            System.arraycopy(bArr, i6, bArr4, 0, 4);
            int i7 = i(bArr4);
            int i8 = i6 + 4;
            byte[] bArr6 = new byte[i7];
            System.arraycopy(bArr, i8, bArr6, 0, i7);
            i2 = i8 + i7;
            this.v = new String(bArr6);
            System.arraycopy(bArr, i2, bArr4, 0, 4);
            this.p = i(bArr4);
        } else {
            byte[] bArr7 = new byte[4];
            this.o = bArr7;
            System.arraycopy(bArr, i6, bArr7, 0, 4);
        }
        i2 = i6 + 4;
        System.arraycopy(bArr, i2, bArr4, 0, 4);
        this.p = i(bArr4);
    }

    private boolean c(byte[] bArr) {
        return d(bArr) && e(bArr);
    }

    private boolean d(byte[] bArr) {
        int i2 = 0;
        while (true) {
            byte[] bArr2 = i;
            if (i2 < bArr2.length) {
                if (bArr2[i2] != bArr[i2]) {
                    return false;
                }
                i2++;
            } else {
                return true;
            }
        }
    }

    private boolean e(byte[] bArr) {
        int length = bArr.length - j.length;
        int i2 = 0;
        while (length < bArr.length) {
            if (j[i2] != bArr[length]) {
                return false;
            }
            length++;
            i2++;
        }
        return true;
    }

    private boolean f(byte[] bArr) {
        try {
            if (!g(bArr)) {
                return false;
            }
            return h(bArr);
        } catch (Exception unused) {
            return false;
        }
    }

    private boolean g(byte[] bArr) {
        int i2 = 0;
        while (true) {
            byte[] bArr2 = f468g;
            if (i2 < bArr2.length) {
                if (bArr2[i2] != bArr[i2]) {
                    return false;
                }
                i2++;
            } else {
                return true;
            }
        }
    }

    private boolean h(byte[] bArr) {
        int length = bArr.length - h.length;
        int i2 = 0;
        while (length < bArr.length) {
            if (h[i2] != bArr[length]) {
                return false;
            }
            length++;
            i2++;
        }
        return true;
    }

    private static int i(byte[] bArr) {
        return ((bArr[0] & 255) << 24) | (bArr[3] & 255) | ((bArr[2] & 255) << 8) | ((bArr[1] & 255) << 16);
    }

    private static long j(byte[] bArr) {
        ByteBuffer allocate = ByteBuffer.allocate(8);
        allocate.put(bArr, 0, bArr.length);
        allocate.flip();
        return allocate.getLong();
    }

    public byte a() {
        return this.s;
    }

    public String b() {
        return this.v;
    }

    public int c() {
        return this.u;
    }

    public void d() {
        if (f(this.k)) {
            this.q = 1;
            b(this.k);
        } else if (!c(this.k)) {
            throw new IOException("no fitted type");
        } else {
            this.q = 2;
        }
    }

    public int e() {
        return this.q;
    }

    public byte f() {
        return this.t;
    }

    public int g() {
        return this.k.length;
    }

    public byte[] h() {
        return this.k;
    }

    public byte[] i() {
        return this.m;
    }

    public int j() {
        return this.n;
    }

    public long k() {
        return this.r;
    }

    public int l() {
        return this.p;
    }

    public byte[] m() {
        return this.o;
    }

    public String toString() {
        return "RespMessage{bytes=" + Arrays.toString(this.k) + ", inputIp=" + Arrays.toString(this.m) + ", inputPort=" + this.n + ", outputIp=" + Arrays.toString(this.o) + ", outputPort=" + this.p + ", type=" + this.q + ", connectionId=" + this.r + '}';
    }
}
