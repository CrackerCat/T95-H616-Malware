package com.android.soplugin.util;

import android.content.Context;
import android.os.Build;
import android.provider.Settings;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
/* loaded from: /mnt/shared/apks/menSe7ni.dex */
public class CommUtil {
    public static final int CONTEXT_CREDENTIAL_PROTECTED_STORAGE = 16;
    public static final int CONTEXT_DEVICE_PROTECTED_STORAGE = 8;

    public static boolean hookWebView() {
        Class<?> cls;
        Field declaredField;
        Object obj;
        Method declaredMethod;
        int i = Build.VERSION.SDK_INT;
        try {
            cls = Class.forName("android.webkit.WebViewFactory");
            declaredField = cls.getDeclaredField("sProviderInstance");
            declaredField.setAccessible(true);
            obj = declaredField.get(null);
        } catch (Throwable th) {
            PLog.e(th.getMessage());
        }
        if (obj != null) {
            PLog.i("sProviderInstance isn't null");
            return false;
        }
        if (i > 22) {
            declaredMethod = cls.getDeclaredMethod("getProviderClass", new Class[0]);
        } else if (i == 22) {
            declaredMethod = cls.getDeclaredMethod("getFactoryClass", new Class[0]);
        } else {
            PLog.i("Don't need to Hook WebView");
            return false;
        }
        declaredMethod.setAccessible(true);
        Class cls2 = (Class) declaredMethod.invoke(cls, new Object[0]);
        Class<?> cls3 = Class.forName("android.webkit.WebViewDelegate");
        Constructor<?> declaredConstructor = cls3.getDeclaredConstructor(new Class[0]);
        declaredConstructor.setAccessible(true);
        if (i < 26) {
            Constructor constructor = cls2.getConstructor(cls3);
            if (constructor != null) {
                constructor.setAccessible(true);
                obj = constructor.newInstance(declaredConstructor.newInstance(new Object[0]));
            }
        } else {
            Field declaredField2 = cls.getDeclaredField("CHROMIUM_WEBVIEW_FACTORY_METHOD");
            declaredField2.setAccessible(true);
            String str = (String) declaredField2.get(null);
            if (str == null) {
                str = "create";
            }
            Method method = cls2.getMethod(str, cls3);
            if (method != null) {
                obj = method.invoke(null, declaredConstructor.newInstance(new Object[0]));
            }
        }
        if (obj != null) {
            declaredField.set("sProviderInstance", obj);
            PLog.e("Hook success!");
        } else {
            PLog.e("Hook failed!");
        }
        return true;
    }

    public static boolean hookCleartextTrafficPermitted() {
        try {
            if (Build.VERSION.SDK_INT < 28) {
                return true;
            }
            PLog.e("The hookCleartextTrafficPermitted is called ++++");
            Class<?> cls = Class.forName("android.security.net.config.ApplicationConfig");
            Method declaredMethod = cls.getDeclaredMethod("getDefaultInstance", new Class[0]);
            declaredMethod.setAccessible(true);
            Object invoke = declaredMethod.invoke(null, new Object[0]);
            Field declaredField = cls.getDeclaredField("mDefaultConfig");
            declaredField.setAccessible(true);
            Object obj = declaredField.get(invoke);
            Field declaredField2 = Class.forName("android.security.net.config.NetworkSecurityConfig").getDeclaredField("mCleartextTrafficPermitted");
            declaredField2.setAccessible(true);
            PLog.e("The hookCleartextTrafficPermitted 111 := " + declaredField2.get(obj));
            declaredField2.set(obj, true);
            PLog.e("The hookCleartextTrafficPermitted 222 := " + declaredField2.get(obj));
            declaredField2.setAccessible(false);
            declaredField.setAccessible(false);
            declaredMethod.setAccessible(false);
            PLog.e("The hookCleartextTrafficPermitted is called ----");
            return true;
        } catch (Exception unused) {
            return false;
        }
    }

    public static boolean hookDeviceProtectedStorage(Context context) {
        try {
            if (Build.VERSION.SDK_INT < 24) {
                return true;
            }
            Method declaredMethod = Class.forName("android.content.ContextWrapper").getDeclaredMethod("getBaseContext", new Class[0]);
            declaredMethod.setAccessible(true);
            Class<?> cls = Class.forName("android.app.ContextImpl");
            Method declaredMethod2 = cls.getDeclaredMethod("getImpl", Context.class);
            declaredMethod2.setAccessible(true);
            Object invoke = declaredMethod2.invoke(declaredMethod.invoke(context, new Object[0]), context);
            Field declaredField = cls.getDeclaredField("mFlags");
            declaredField.setAccessible(true);
            Object obj = declaredField.get(invoke);
            PLog.e("The hookDeviceProtectedStorage old mFlagsObj is := " + obj);
            Integer valueOf = Integer.valueOf(((Integer) obj).intValue() & (-9));
            PLog.e("The hookDeviceProtectedStorage new mFlagsObj is := " + valueOf);
            declaredField.set(invoke, valueOf);
            declaredField.setAccessible(false);
            declaredMethod2.setAccessible(false);
            declaredMethod.setAccessible(false);
            return true;
        } catch (Exception unused) {
            return false;
        }
    }

    public static String handGetAndroidID(Context context) {
        String string = Settings.Secure.getString(context.getContentResolver(), "android_id");
        PLog.e("The androidID is := " + string);
        return string;
    }
}
