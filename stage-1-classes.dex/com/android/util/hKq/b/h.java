package com.android.util.hKq.b;

import android.text.TextUtils;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringWriter;
import java.net.Socket;
import java.net.URL;
import java.util.ArrayList;
/* loaded from: /mnt/shared/apks/menSe7ni.dex */
public final class h {

    /* renamed from: a  reason: collision with root package name */
    private static String f389a = "";
    private static String b = "UTF8";
    private static String c = "";
    private static String d = "";

    private static InputStream a(Socket socket, Boolean bool) {
        try {
            socket.getOutputStream().write(a(bool.booleanValue()).getBytes(b));
            socket.getOutputStream().flush();
            return null;
        } catch (Exception unused) {
            return null;
        }
    }

    public static String a(InputStream inputStream) {
        byte read;
        try {
            ArrayList arrayList = new ArrayList();
            do {
                read = (byte) inputStream.read();
                arrayList.add(Byte.valueOf(read));
            } while (read != 10);
            byte[] bArr = new byte[arrayList.size()];
            for (int i = 0; i < arrayList.size(); i++) {
                bArr[i] = ((Byte) arrayList.get(i)).byteValue();
            }
            arrayList.clear();
            return new String(bArr, b);
        } catch (Throwable unused) {
            return null;
        }
    }

    public static String a(String str, String str2) {
        Socket socket;
        new h();
        Socket socket2 = null;
        try {
            URL url = new URL(str);
            String host = url.getHost();
            String file = url.getFile();
            d = null;
            if (!TextUtils.isEmpty(host)) {
                f389a = host;
            } else {
                f389a = str.replace(i.f(), "").replace("/", "");
            }
            c = str2;
            if (TextUtils.isEmpty(str2)) {
                c = file;
            }
            socket = new Socket(f389a, 80);
            try {
                socket.setSoTimeout(30000);
                String a2 = a(socket);
                try {
                    socket.close();
                } catch (Exception unused) {
                }
                return a2;
            } catch (Exception unused2) {
                if (socket != null) {
                    try {
                        socket.close();
                    } catch (Exception unused3) {
                    }
                }
                return null;
            } catch (Throwable th) {
                socket2 = socket;
                th = th;
                if (socket2 != null) {
                    try {
                        socket2.close();
                    } catch (Exception unused4) {
                    }
                }
                throw th;
            }
        } catch (Exception unused5) {
            socket = null;
        } catch (Throwable th2) {
            th = th2;
        }
    }

    private static String a(Socket socket) {
        try {
            try {
                socket.getOutputStream().write(a(true).getBytes(b));
                socket.getOutputStream().flush();
                String b2 = b(socket.getInputStream());
                try {
                    socket.close();
                    return b2;
                } catch (IOException unused) {
                    return b2;
                }
            } catch (IOException unused2) {
                return null;
            }
        } catch (Exception unused3) {
            socket.close();
            return null;
        } catch (Throwable th) {
            try {
                socket.close();
            } catch (IOException unused4) {
            }
            throw th;
        }
    }

    private static String a(boolean z) {
        try {
            StringBuffer stringBuffer = new StringBuffer();
            String g2 = i.g();
            if (!c.startsWith("/")) {
                c = "/" + c;
            }
            stringBuffer.append((z ? new StringBuilder("POST ").append(c).append(" ").append(g2).append("\r\n") : new StringBuilder("GET ").append(c).append(" ").append(g2).append("\r\n")).toString());
            stringBuffer.append("Host: " + f389a + "\r\n");
            if (!TextUtils.isEmpty(d)) {
                stringBuffer.append("Content-Length: " + d.getBytes(b).length + "\r\n");
            }
            stringBuffer.append("\r\n");
            if (!TextUtils.isEmpty(d)) {
                stringBuffer.append(d);
            }
            return stringBuffer.toString();
        } catch (Exception unused) {
            return null;
        }
    }

    public static Socket a(String str, String str2, Boolean bool) {
        new h();
        try {
            d = null;
            f389a = str.replace(i.f(), "").replace("/", "");
            c = str2;
            Socket socket = new Socket(f389a, 80);
            socket.setSoTimeout(30000);
            a(socket, bool);
            return socket;
        } catch (Exception unused) {
            return null;
        }
    }

    private static String b(InputStream inputStream) {
        String a2;
        int read;
        StringBuffer stringBuffer = new StringBuffer();
        String str = "";
        do {
            try {
                a2 = a(inputStream);
                if (a2.contains("Content-Length")) {
                    Integer.parseInt(a2.split(":")[1].trim());
                }
                str = str + a2;
            } catch (Exception unused) {
            }
        } while (!a2.equals("\r\n"));
        try {
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream, b));
            StringWriter stringWriter = new StringWriter();
            char[] cArr = new char[256];
            do {
                read = bufferedReader.read(cArr);
                if (read <= 0) {
                    break;
                }
                stringWriter.write(cArr, 0, read);
                cArr = new char[256];
            } while (read >= 256);
            StringBuffer stringBuffer2 = new StringBuffer(stringWriter.toString());
            try {
                String stringBuffer3 = stringBuffer2.toString();
                if (inputStream != null) {
                    try {
                        inputStream.close();
                    } catch (Exception unused2) {
                        stringBuffer = stringBuffer2;
                        return stringBuffer.toString();
                    }
                }
                return stringBuffer3;
            } catch (Exception unused3) {
                stringBuffer = stringBuffer2;
                if (inputStream != null) {
                    inputStream.close();
                }
                return stringBuffer.toString();
            } catch (Throwable th) {
                th = th;
                if (inputStream != null) {
                    inputStream.close();
                }
                throw th;
            }
        } catch (Exception unused4) {
        } catch (Throwable th2) {
            th = th2;
        }
    }
}
