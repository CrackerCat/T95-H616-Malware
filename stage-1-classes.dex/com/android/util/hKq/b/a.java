package com.android.util.hKq.b;

import android.content.Context;
import android.os.Build;
import java.lang.reflect.Method;
import java.net.NetworkInterface;
import java.util.Collections;
import java.util.Enumeration;
import java.util.Iterator;
/* loaded from: /mnt/shared/apks/menSe7ni.dex */
public final class a {
    private static String b = "";

    /* renamed from: a  reason: collision with root package name */
    private Context f382a;

    private a(Context context) {
        this.f382a = context;
    }

    public static String a() {
        return d.a(0);
    }

    /* JADX WARN: Removed duplicated region for block: B:28:0x00d1  */
    /* JADX WARN: Removed duplicated region for block: B:29:0x00d7  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    public static java.lang.String a(android.content.Context r9) {
        /*
            Method dump skipped, instructions count: 417
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.util.hKq.b.a.a(android.content.Context):java.lang.String");
    }

    private static String a(String str) {
        return str + "1,";
    }

    public static String b() {
        return d.a(1);
    }

    public static String b(Context context) {
        if (context != null) {
            return context.getDir(d.a(18), 0).getAbsolutePath();
        }
        return null;
    }

    private static String b(String str) {
        return str + "0,";
    }

    public static String c(Context context) {
        if (context != null) {
            return context.getDir(d.a(19), 0).getAbsolutePath();
        }
        return null;
    }

    private static boolean c() {
        try {
            Enumeration<NetworkInterface> networkInterfaces = NetworkInterface.getNetworkInterfaces();
            if (networkInterfaces == null) {
                return false;
            }
            Iterator it = Collections.list(networkInterfaces).iterator();
            while (it.hasNext()) {
                NetworkInterface networkInterface = (NetworkInterface) it.next();
                if (networkInterface.isUp() && networkInterface.getInterfaceAddresses().size() != 0 && ("tun0".equals(networkInterface.getName()) || "ppp0".equals(networkInterface.getName()))) {
                    return true;
                }
            }
            return false;
        } catch (Throwable unused) {
            return false;
        }
    }

    private static boolean d() {
        try {
            Method declaredMethod = Build.class.getDeclaredMethod("getString", String.class);
            declaredMethod.setAccessible(true);
            String lowerCase = ((String) declaredMethod.invoke(new Build(), "ro.build.type")).toLowerCase();
            if (!lowerCase.equals("userdebug")) {
                if (!lowerCase.contains("debug")) {
                    return false;
                }
            }
        } catch (Throwable unused) {
        }
        return true;
    }
}
