package com.unia.y;

import android.content.Context;
import android.content.SharedPreferences;
import android.os.Process;
import java.util.Arrays;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
/* loaded from: /mnt/shared/apks/menSe7ni.dex */
public class bi {
    private static final String c = "dy_live";

    /* renamed from: a  reason: collision with root package name */
    String f504a;
    private ExecutorService b;
    private Context d;
    private boolean e;
    private long[] f;

    /* renamed from: g  reason: collision with root package name */
    private boolean f505g;

    /* loaded from: /mnt/shared/apks/menSe7ni.dex */
    private static class a {

        /* renamed from: a  reason: collision with root package name */
        private static final bi f507a = new bi();

        private a() {
        }
    }

    private bi() {
        this.b = Executors.newSingleThreadExecutor();
        this.f504a = "";
        this.e = false;
        this.f = new long[]{0, 0};
        this.f505g = false;
    }

    public static final bi a() {
        return a.f507a;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void a(String str, String str2) {
        try {
            bv.b("live: commit[" + str + ", " + str2 + "].");
            SharedPreferences.Editor edit = this.d.getSharedPreferences(c, 4).edit();
            edit.putString(str, str2);
            edit.commit();
        } catch (Throwable th) {
            th.printStackTrace();
        }
    }

    private void d() {
        try {
            if (this.d == null) {
                return;
            }
            this.b.execute(new Runnable() { // from class: com.unia.y.bi.1
                @Override // java.lang.Runnable
                public void run() {
                    if (bi.this.e) {
                        return;
                    }
                    bi.this.e = true;
                    bi.this.f();
                    bv.b("live: [" + bi.this.f504a + "] pid[" + Process.myTid() + "] start live collect.");
                    bi.this.a("dyLiveStart_" + bi.this.f504a, "" + System.currentTimeMillis());
                    while (true) {
                        bi.this.a("dyLiveCommit_" + bi.this.f504a, "" + System.currentTimeMillis());
                        cb.a(30000L);
                    }
                }
            });
        } catch (Throwable th) {
            th.printStackTrace();
        }
    }

    private synchronized long[] e() {
        long j;
        long j2;
        try {
            Map<String, ?> all = this.d.getSharedPreferences(c, 4).getAll();
            j = 0;
            j2 = 0;
            for (String str : all.keySet()) {
                String str2 = (String) all.get(str);
                if (str.equals("dyLiveStart_" + this.f504a)) {
                    try {
                        j2 = Long.parseLong(str2);
                    } catch (Throwable unused) {
                        j2 = -2;
                    }
                } else if (str.equals("dyLiveCommit_" + this.f504a)) {
                    try {
                        j = Long.parseLong(str2);
                    } catch (Throwable unused2) {
                        j = -2;
                    }
                }
            }
            bv.b("live: getLiveTime [" + this.f504a + "] tid[" + Process.myTid() + "] liveNow[" + j + "], liveStart[" + j2 + "], clear[" + this.f505g + "]");
        } catch (Throwable th) {
            th.printStackTrace();
            return new long[]{-1, -1};
        }
        return new long[]{j2, j};
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void f() {
        try {
            this.f505g = false;
            SharedPreferences sharedPreferences = this.d.getSharedPreferences(c, 4);
            sharedPreferences.edit().remove("dyLiveStart_" + this.f504a).commit();
            sharedPreferences.edit().remove("dyLiveCommit_" + this.f504a).commit();
            bv.b("live: clear sp.");
        } catch (Throwable th) {
            th.printStackTrace();
        }
    }

    public bi a(Context context) {
        try {
            this.f504a = cb.a(context);
        } catch (Throwable th) {
            th.printStackTrace();
        }
        this.d = context;
        return this;
    }

    public bi a(boolean z) {
        bv.b("live: clearSpAfterGet[" + this.f504a + "], clear[" + z + "]");
        this.f505g = z;
        return this;
    }

    public boolean b() {
        this.f = e();
        d();
        return this.e;
    }

    public long[] c() {
        long[] jArr = this.f;
        long[] copyOf = Arrays.copyOf(jArr, jArr.length);
        long[] jArr2 = this.f;
        jArr2[0] = 0;
        jArr2[1] = 0;
        return copyOf;
    }
}
