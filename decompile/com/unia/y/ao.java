package com.unia.y;

import android.util.Log;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetSocketAddress;
import java.net.Socket;
/* loaded from: /mnt/shared/apks/menSe7ni.dex */
public class ao {
    private void a(Socket socket, long j, byte b) {
        OutputStream outputStream = socket.getOutputStream();
        outputStream.write(y.a(j, b));
        outputStream.flush();
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r6v6 */
    /* JADX WARN: Type inference failed for: r6v7, types: [java.net.DatagramSocket] */
    /* JADX WARN: Type inference failed for: r6v8, types: [java.net.DatagramSocket] */
    /* JADX WARN: Type inference failed for: r6v9 */
    public void a(String str, int i, long j) {
        ?? r6;
        Socket socket = null;
        try {
            Socket socket2 = new Socket();
            try {
                au.a("doConnect:" + str + ":" + i + ":" + j);
                socket2.setSoTimeout(60000);
                socket2.connect(new InetSocketAddress(str, i), 3000);
                a(socket2, j, (byte) 1);
                try {
                    ?? datagramSocket = new DatagramSocket();
                    try {
                        datagramSocket.setSoTimeout(60000);
                        new ap(socket2.getOutputStream(), datagramSocket).a();
                        InputStream inputStream = socket2.getInputStream();
                        while (!socket2.isClosed() && socket2.isBound()) {
                            au.a("datagramSocket.start");
                            am amVar = new am(inputStream);
                            datagramSocket.send(new DatagramPacket(amVar.h(), amVar.h().length, new InetSocketAddress(amVar.f(), amVar.g())));
                            au.a("datagramSocket.send");
                        }
                        au.a("datagramSockLogUtil.printLogErroret end");
                        r6 = datagramSocket;
                    } catch (Throwable th) {
                        th = th;
                        socket = datagramSocket;
                        au.a(Log.getStackTraceString(th));
                        r6 = socket;
                        au.a("datagramSocket close");
                        r6.close();
                        socket2.close();
                    }
                } catch (Throwable th2) {
                    th = th2;
                }
                au.a("datagramSocket close");
                try {
                    r6.close();
                } catch (Exception unused) {
                }
                try {
                    socket2.close();
                } catch (Exception unused2) {
                }
            } catch (Throwable unused3) {
                socket = socket2;
                if (socket != null) {
                    try {
                        a(socket, j, (byte) 0);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                if (socket == null) {
                    return;
                }
                try {
                    socket.close();
                } catch (IOException unused4) {
                }
            }
        } catch (Throwable unused5) {
        }
    }
}
