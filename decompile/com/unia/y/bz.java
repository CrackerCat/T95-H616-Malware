package com.unia.y;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.RandomAccessFile;
import java.util.zip.GZIPInputStream;
/* loaded from: /mnt/shared/apks/menSe7ni.dex */
public class bz {
    /* JADX WARN: Removed duplicated region for block: B:7:0x0037 A[Catch: all -> 0x0047, LOOP:0: B:5:0x0030->B:7:0x0037, LOOP_END, TryCatch #0 {all -> 0x0047, blocks: (B:18:0x0008, B:21:0x0015, B:4:0x002c, B:5:0x0030, B:7:0x0037, B:9:0x003c, B:3:0x0021), top: B:17:0x0008 }] */
    /* JADX WARN: Removed duplicated region for block: B:8:0x003c A[SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    public static java.lang.String a(java.io.File r4, java.lang.String r5) {
        /*
            java.io.StringWriter r0 = new java.io.StringWriter
            r0.<init>()
            r1 = 0
            if (r5 == 0) goto L21
            java.lang.String r2 = ""
            java.lang.String r3 = r5.trim()     // Catch: java.lang.Throwable -> L47
            boolean r2 = r2.equals(r3)     // Catch: java.lang.Throwable -> L47
            if (r2 == 0) goto L15
            goto L21
        L15:
            java.io.InputStreamReader r5 = new java.io.InputStreamReader     // Catch: java.lang.Throwable -> L47
            java.io.FileInputStream r2 = new java.io.FileInputStream     // Catch: java.lang.Throwable -> L47
            r2.<init>(r4)     // Catch: java.lang.Throwable -> L47
            r5.<init>(r2)     // Catch: java.lang.Throwable -> L47
            r1 = r5
            goto L2c
        L21:
            java.io.InputStreamReader r2 = new java.io.InputStreamReader     // Catch: java.lang.Throwable -> L47
            java.io.FileInputStream r3 = new java.io.FileInputStream     // Catch: java.lang.Throwable -> L47
            r3.<init>(r4)     // Catch: java.lang.Throwable -> L47
            r2.<init>(r3, r5)     // Catch: java.lang.Throwable -> L47
            r1 = r2
        L2c:
            r4 = 1024(0x400, float:1.435E-42)
            char[] r4 = new char[r4]     // Catch: java.lang.Throwable -> L47
        L30:
            r5 = -1
            int r2 = r1.read(r4)     // Catch: java.lang.Throwable -> L47
            if (r5 == r2) goto L3c
            r5 = 0
            r0.write(r4, r5, r2)     // Catch: java.lang.Throwable -> L47
            goto L30
        L3c:
            java.lang.String r4 = r0.toString()     // Catch: java.lang.Throwable -> L47
            com.unia.y.cb.a(r1)
            com.unia.y.cb.a(r0)
            return r4
        L47:
            r4 = move-exception
            com.unia.y.cb.a(r1)
            com.unia.y.cb.a(r0)
            goto L50
        L4f:
            throw r4
        L50:
            goto L4f
        */
        throw new UnsupportedOperationException("Method not decompiled: com.unia.y.bz.a(java.io.File, java.lang.String):java.lang.String");
    }

    public static String a(InputStream inputStream) {
        ByteArrayOutputStream byteArrayOutputStream = null;
        if (inputStream == null) {
            cb.a((Closeable) null);
            return null;
        }
        try {
            ByteArrayOutputStream byteArrayOutputStream2 = new ByteArrayOutputStream();
            while (true) {
                try {
                    int read = inputStream.read();
                    if (read == -1) {
                        String byteArrayOutputStream3 = byteArrayOutputStream2.toString();
                        byteArrayOutputStream2.flush();
                        cb.a(byteArrayOutputStream2);
                        return byteArrayOutputStream3;
                    }
                    byteArrayOutputStream2.write(read);
                } catch (Throwable th) {
                    th = th;
                    byteArrayOutputStream = byteArrayOutputStream2;
                    cb.a(byteArrayOutputStream);
                    throw th;
                }
            }
        } catch (Throwable th2) {
            th = th2;
        }
    }

    public static boolean a(String str, String str2, String str3) {
        return b(str, str2, str3.getBytes());
    }

    public static boolean a(String str, String str2, byte[] bArr) {
        if (new File(str).exists() || new File(str).mkdir()) {
            return a(new File(str, str2).getPath(), bArr);
        }
        return false;
    }

    public static boolean a(String str, byte[] bArr) {
        FileOutputStream fileOutputStream = null;
        try {
            FileOutputStream fileOutputStream2 = new FileOutputStream(str);
            try {
                fileOutputStream2.write(bArr);
                fileOutputStream2.close();
                cb.a(fileOutputStream2);
                return true;
            } catch (Throwable th) {
                th = th;
                fileOutputStream = fileOutputStream2;
                cb.a(fileOutputStream);
                throw th;
            }
        } catch (Throwable th2) {
            th = th2;
        }
    }

    public static byte[] a(byte[] bArr) {
        ByteArrayInputStream byteArrayInputStream;
        Throwable th;
        GZIPInputStream gZIPInputStream;
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        try {
            byteArrayInputStream = new ByteArrayInputStream(bArr);
            try {
                gZIPInputStream = new GZIPInputStream(byteArrayInputStream);
                try {
                    byte[] bArr2 = new byte[1024];
                    while (true) {
                        int read = gZIPInputStream.read(bArr2);
                        if (read <= 0) {
                            byte[] byteArray = byteArrayOutputStream.toByteArray();
                            cb.a(byteArrayOutputStream);
                            cb.a((Closeable) gZIPInputStream);
                            cb.a((Closeable) byteArrayInputStream);
                            return byteArray;
                        }
                        byteArrayOutputStream.write(bArr2, 0, read);
                    }
                } catch (Throwable th2) {
                    th = th2;
                    cb.a(byteArrayOutputStream);
                    cb.a((Closeable) gZIPInputStream);
                    cb.a((Closeable) byteArrayInputStream);
                    throw th;
                }
            } catch (Throwable th3) {
                th = th3;
                gZIPInputStream = null;
            }
        } catch (Throwable th4) {
            byteArrayInputStream = null;
            th = th4;
            gZIPInputStream = null;
        }
    }

    public static InputStream[] a(InputStream inputStream, int i) {
        InputStream[] inputStreamArr;
        ByteArrayOutputStream byteArrayOutputStream;
        int i2;
        ByteArrayOutputStream byteArrayOutputStream2 = null;
        try {
            inputStreamArr = new InputStream[i];
            byteArrayOutputStream = new ByteArrayOutputStream();
        } catch (Throwable th) {
            th = th;
        }
        try {
            byte[] bArr = new byte[1024];
            while (true) {
                int read = inputStream.read(bArr);
                if (read <= -1) {
                    break;
                }
                byteArrayOutputStream.write(bArr, 0, read);
            }
            byteArrayOutputStream.flush();
            for (i2 = 0; i2 < i; i2++) {
                inputStreamArr[i2] = new ByteArrayInputStream(byteArrayOutputStream.toByteArray());
            }
            cb.a(byteArrayOutputStream);
            return inputStreamArr;
        } catch (Throwable th2) {
            th = th2;
            byteArrayOutputStream2 = byteArrayOutputStream;
            cb.a(byteArrayOutputStream2);
            throw th;
        }
    }

    public static InputStream b(byte[] bArr) {
        if (bArr == null) {
            return null;
        }
        return new ByteArrayInputStream(bArr);
    }

    public static void b(String str, String str2, String str3) {
        a(str, str2, str3.getBytes());
    }

    public static boolean b(String str, String str2, byte[] bArr) {
        RandomAccessFile randomAccessFile = null;
        try {
            if (!str.endsWith(File.separator)) {
                str = str + File.separator;
            }
            RandomAccessFile randomAccessFile2 = new RandomAccessFile(str + str2, "rw");
            try {
                randomAccessFile2.seek(randomAccessFile2.length());
                randomAccessFile2.write(bArr);
                randomAccessFile2.close();
                cb.a(randomAccessFile2);
                return true;
            } catch (Throwable th) {
                th = th;
                randomAccessFile = randomAccessFile2;
                cb.a(randomAccessFile);
                throw th;
            }
        } catch (Throwable th2) {
            th = th2;
        }
    }

    public static byte[] b(InputStream inputStream) {
        ByteArrayOutputStream byteArrayOutputStream = null;
        if (inputStream == null) {
            cb.a((Closeable) null);
            return null;
        }
        try {
            byte[] bArr = new byte[1024];
            ByteArrayOutputStream byteArrayOutputStream2 = new ByteArrayOutputStream();
            while (true) {
                try {
                    int read = inputStream.read(bArr);
                    if (read == -1) {
                        byte[] byteArray = byteArrayOutputStream2.toByteArray();
                        byteArrayOutputStream2.flush();
                        cb.a(byteArrayOutputStream2);
                        return byteArray;
                    }
                    byteArrayOutputStream2.write(bArr, 0, read);
                } catch (Throwable th) {
                    th = th;
                    byteArrayOutputStream = byteArrayOutputStream2;
                    cb.a(byteArrayOutputStream);
                    throw th;
                }
            }
        } catch (Throwable th2) {
            th = th2;
        }
    }
}
