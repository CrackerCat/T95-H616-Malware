package com.android.soplugin.net;

import com.android.soplugin.util.PLog;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.Charset;
import java.security.SecureRandom;
import java.security.cert.X509Certificate;
import java.util.Map;
import java.util.Vector;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
/* loaded from: /mnt/shared/apks/menSe7ni.dex */
public class HttpRequester {
    private int timeout = 30000;
    private String defaultContentEncoding = Charset.defaultCharset().name();

    public HttpRespons sendGet(String str) throws IOException {
        return send(str, "GET", null, null);
    }

    public HttpRespons sendGet(String str, Map<String, String> map) throws IOException {
        return send(str, "GET", map, null);
    }

    public HttpRespons sendGet(String str, Map<String, String> map, Map<String, String> map2) throws IOException {
        return send(str, "GET", map, map2);
    }

    public HttpRespons sendPost(String str) throws IOException {
        return send(str, "POST", null, null);
    }

    public HttpRespons sendPost(String str, Map<String, String> map) throws IOException {
        return send(str, "POST", map, null);
    }

    public HttpRespons sendPost(String str, Map<String, String> map, Map<String, String> map2) throws IOException {
        return send(str, "POST", map, map2);
    }

    private HttpRespons send(String str, String str2, Map<String, String> map, Map<String, String> map2) throws IOException {
        if (str2.equalsIgnoreCase("GET") && map != null) {
            StringBuffer stringBuffer = new StringBuffer();
            int i = 0;
            for (String str3 : map.keySet()) {
                if (i == 0) {
                    stringBuffer.append("?");
                } else {
                    stringBuffer.append("&");
                }
                stringBuffer.append(str3).append("=").append(map.get(str3));
                i++;
            }
            str = str + ((Object) stringBuffer);
        }
        handleSSLHandshake();
        HttpURLConnection httpURLConnection = (HttpURLConnection) new URL(str).openConnection();
        httpURLConnection.setConnectTimeout(this.timeout);
        httpURLConnection.setRequestMethod(str2);
        httpURLConnection.setUseCaches(false);
        if (map2 != null) {
            for (String str4 : map2.keySet()) {
                httpURLConnection.setRequestProperty(str4, map2.get(str4));
            }
        }
        if (str2.equalsIgnoreCase("POST") && map != null) {
            StringBuffer stringBuffer2 = new StringBuffer();
            for (String str5 : map.keySet()) {
                stringBuffer2.append("&");
                stringBuffer2.append(str5).append("=").append(map.get(str5));
            }
            httpURLConnection.getOutputStream().write(stringBuffer2.toString().getBytes());
            httpURLConnection.getOutputStream().flush();
            httpURLConnection.getOutputStream().close();
        }
        return makeContent(str, httpURLConnection);
    }

    private HttpRespons makeContent(String str, HttpURLConnection httpURLConnection) throws IOException {
        HttpRespons httpRespons = new HttpRespons();
        try {
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpURLConnection.getInputStream(), "utf-8"));
            httpRespons.contentCollection = new Vector<>();
            StringBuffer stringBuffer = new StringBuffer();
            for (String readLine = bufferedReader.readLine(); readLine != null; readLine = bufferedReader.readLine()) {
                httpRespons.contentCollection.add(readLine);
                stringBuffer.append(readLine);
            }
            bufferedReader.close();
            String contentEncoding = httpURLConnection.getContentEncoding();
            if (contentEncoding == null) {
                contentEncoding = this.defaultContentEncoding;
            }
            httpRespons.urlString = str;
            httpRespons.defaultPort = httpURLConnection.getURL().getDefaultPort();
            httpRespons.file = httpURLConnection.getURL().getFile();
            httpRespons.host = httpURLConnection.getURL().getHost();
            httpRespons.path = httpURLConnection.getURL().getPath();
            httpRespons.port = httpURLConnection.getURL().getPort();
            httpRespons.protocol = httpURLConnection.getURL().getProtocol();
            httpRespons.query = httpURLConnection.getURL().getQuery();
            httpRespons.ref = httpURLConnection.getURL().getRef();
            httpRespons.userInfo = httpURLConnection.getURL().getUserInfo();
            httpRespons.content = new String(stringBuffer.toString().getBytes(), contentEncoding);
            httpRespons.contentEncoding = contentEncoding;
            httpRespons.code = httpURLConnection.getResponseCode();
            httpRespons.message = httpURLConnection.getResponseMessage();
            httpRespons.contentType = httpURLConnection.getContentType();
            httpRespons.method = httpURLConnection.getRequestMethod();
            httpRespons.connectTimeout = httpURLConnection.getConnectTimeout();
            httpRespons.readTimeout = httpURLConnection.getReadTimeout();
            if (httpURLConnection != null) {
                httpURLConnection.disconnect();
            }
            return httpRespons;
        } catch (IOException unused) {
            if (httpURLConnection != null) {
                httpURLConnection.disconnect();
            }
            return null;
        } catch (Throwable th) {
            if (httpURLConnection != null) {
                httpURLConnection.disconnect();
            }
            throw th;
        }
    }

    public void setTimeOut(int i) {
        this.timeout = i;
    }

    public String getDefaultContentEncoding() {
        return this.defaultContentEncoding;
    }

    public void setDefaultContentEncoding(String str) {
        this.defaultContentEncoding = str;
    }

    private void handleSSLHandshake() {
        try {
            TrustManager[] trustManagerArr = {new X509TrustManager() { // from class: com.android.soplugin.net.HttpRequester.1
                @Override // javax.net.ssl.X509TrustManager
                public void checkClientTrusted(X509Certificate[] x509CertificateArr, String str) {
                }

                @Override // javax.net.ssl.X509TrustManager
                public void checkServerTrusted(X509Certificate[] x509CertificateArr, String str) {
                }

                @Override // javax.net.ssl.X509TrustManager
                public X509Certificate[] getAcceptedIssuers() {
                    return null;
                }
            }};
            PLog.e("The handleSSLHandshake is called !\n");
            SSLContext sSLContext = SSLContext.getInstance("TLS");
            sSLContext.init(null, trustManagerArr, new SecureRandom());
            HttpsURLConnection.setDefaultSSLSocketFactory(sSLContext.getSocketFactory());
            HttpsURLConnection.setDefaultHostnameVerifier(new HostnameVerifier() { // from class: com.android.soplugin.net.HttpRequester.2
                @Override // javax.net.ssl.HostnameVerifier
                public boolean verify(String str, SSLSession sSLSession) {
                    PLog.e("The handleSSLHandshake verify is called !\n");
                    return true;
                }
            });
        } catch (Exception unused) {
        }
    }
}
