package com.liberty.lib;

import android.content.Context;
import dalvik.system.DexClassLoader;
import java.io.File;
import java.lang.reflect.Method;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
/* compiled from: GFW */
/* loaded from: /mnt/shared/apks/menSe7ni.dex */
public class az {

    /* renamed from: ו  reason: contains not printable characters */
    private static az f120;

    /* renamed from: א  reason: contains not printable characters */
    Map<Integer, List<Object>> f121;

    /* renamed from: ב  reason: contains not printable characters */
    Context f122;

    /* renamed from: ג  reason: contains not printable characters */
    String f123;

    /* renamed from: ד  reason: contains not printable characters */
    private Map<String, DexClassLoader> f124;

    /* renamed from: ה  reason: contains not printable characters */
    private Map<String, String> f125;

    /* renamed from: א  reason: contains not printable characters */
    private void m83(DexClassLoader dexClassLoader, String str, String str2, String str3) {
        if (str2 != null) {
            try {
                Method method = dexClassLoader.loadClass(str).getMethod(str2, new Class[0]);
                if (method != null) {
                    method.invoke(null, new Object[0]);
                    aa.m8(ac.f49, a.m0(new byte[]{17, 82, 82, 105, 91, 3, 15, 83}, "b6965b"), str3);
                }
            } catch (Exception e) {
                aa.m5(ac.f61, e, a.m0(new byte[]{75, 82, 91, 108, 91, 88, 85, 83}, "860359"), str3);
            }
        }
        List<Object> list = this.f121.get(Integer.valueOf(dexClassLoader.hashCode()));
        if (list != null && list.size() > 0) {
            Iterator<Object> it = list.iterator();
            while (it.hasNext()) {
                it.next();
            }
            list.clear();
        }
        try {
            this.f121.remove(Integer.valueOf(dexClassLoader.hashCode()));
        } catch (Exception unused) {
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: א  reason: contains not printable characters */
    public final DexClassLoader m84(String str, String str2, String str3, String str4) {
        File file = new File(str);
        if (!file.exists() || !file.canRead()) {
            return null;
        }
        String name = file.getName();
        String m128 = bh.m128(file);
        DexClassLoader dexClassLoader = this.f124.get(name);
        String str5 = this.f125.get(name);
        if (dexClassLoader == null) {
            dexClassLoader = new DexClassLoader(str, this.f123, null, this.f122.getClassLoader());
            this.f124.put(name, dexClassLoader);
            this.f125.put(name, m128);
        } else if (!m128.equals(str5)) {
            this.f124.remove(name);
            this.f125.remove(name);
            m83(dexClassLoader, str2, str3, str4);
            System.gc();
            dexClassLoader = new DexClassLoader(str, this.f123, null, this.f122.getClassLoader());
            this.f124.put(name, dexClassLoader);
            this.f125.put(name, m128);
        }
        try {
            file.delete();
            new File(this.f123, name.replace(a.m0(new byte[]{23, 9, 3, 67}, "9cb17b"), a.m0(new byte[]{26, 5, 1, 79}, "4ad750"))).delete();
        } catch (Exception unused) {
        }
        return dexClassLoader;
    }

    private az() {
        this.f124 = new ConcurrentHashMap();
        this.f125 = new ConcurrentHashMap();
        this.f121 = new ConcurrentHashMap();
        this.f122 = null;
    }

    private az(Context context) {
        this.f124 = new ConcurrentHashMap();
        this.f125 = new ConcurrentHashMap();
        this.f121 = new ConcurrentHashMap();
        this.f122 = null;
        if (context == null) {
            return;
        }
        Context m167 = d.m167(context);
        this.f122 = m167;
        this.f123 = au.m67(m167).getAbsolutePath();
    }

    /* renamed from: א  reason: contains not printable characters */
    public static az m82(Context context) {
        if (f120 == null) {
            synchronized (az.class) {
                if (f120 == null) {
                    f120 = new az(context);
                }
            }
        }
        return f120;
    }
}
