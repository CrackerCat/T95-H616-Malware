package com.debby;

import android.os.Handler;
import android.os.Looper;
import java.util.concurrent.Executor;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
/* loaded from: /mnt/shared/apks/menSe7ni.dex */
public final class k {

    /* renamed from: a  reason: collision with root package name */
    public static final int f428a;
    public static final Executor b;
    public static final Executor c = new b();

    /* loaded from: /mnt/shared/apks/menSe7ni.dex */
    public class a implements ThreadFactory {

        /* renamed from: a  reason: collision with root package name */
        public final AtomicInteger f429a = new AtomicInteger(1);

        @Override // java.util.concurrent.ThreadFactory
        public Thread newThread(Runnable runnable) {
            return new Thread(runnable, "http-pool-" + this.f429a.getAndIncrement());
        }
    }

    /* loaded from: /mnt/shared/apks/menSe7ni.dex */
    public class b implements Executor {

        /* renamed from: a  reason: collision with root package name */
        public final Handler f430a = new Handler(Looper.getMainLooper());

        @Override // java.util.concurrent.Executor
        public void execute(Runnable runnable) {
            this.f430a.post(runnable);
        }
    }

    static {
        int availableProcessors = Runtime.getRuntime().availableProcessors();
        f428a = availableProcessors;
        int i = (availableProcessors * 2) + 1;
        b = new ThreadPoolExecutor(i, i, 30L, TimeUnit.SECONDS, new LinkedBlockingQueue(128), new a());
    }

    public static Executor a() {
        return c;
    }

    public static Executor b() {
        return b;
    }
}
