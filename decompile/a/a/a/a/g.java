package a.a.a.a;

import a.a.a.ag;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.nio.channels.Selector;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicBoolean;
/* loaded from: /mnt/shared/apks/menSe7ni.dex */
public class g implements d {

    /* renamed from: g  reason: collision with root package name */
    private Thread f334g;

    /* renamed from: a  reason: collision with root package name */
    private long f333a = new Date().getTime();
    private long b = new Date().getTime();
    private final HashMap c = new HashMap();
    private final HashMap d = new HashMap();
    private final ag e = new ag();
    private final List f = new LinkedList();
    private AtomicBoolean h = new AtomicBoolean();

    private void a(String str, c cVar, InetAddress inetAddress) {
        b bVar = (b) this.d.get(str);
        if (bVar == null) {
            return;
        }
        Iterator it = bVar.c.iterator();
        while (it.hasNext()) {
            ((e) it.next()).a(str, cVar, inetAddress);
        }
        this.d.remove(str);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void e() {
        while (!this.h.get()) {
            ArrayList<b> arrayList = new ArrayList();
            synchronized (this.f) {
                if (this.f.isEmpty()) {
                    try {
                        this.f.wait();
                    } catch (InterruptedException unused) {
                    }
                }
                arrayList.addAll(this.f);
                this.f.clear();
            }
            for (b bVar : arrayList) {
                i iVar = new i(null);
                iVar.f336a = bVar.f330a;
                try {
                    InetAddress byName = InetAddress.getByName(bVar.f330a);
                    iVar.b = c.DONE;
                    iVar.c = byName;
                } catch (UnknownHostException e) {
                    e.printStackTrace();
                    iVar.b = c.FAILED;
                }
                this.e.a(iVar);
            }
        }
    }

    private boolean f() {
        this.h.set(false);
        Thread thread = new Thread(new h(this));
        this.f334g = thread;
        thread.start();
        return true;
    }

    private void g() {
        if (this.f334g == null) {
            return;
        }
        this.h.set(true);
        this.f334g.interrupt();
        while (true) {
            try {
                this.f334g.join();
                this.f.clear();
                this.f334g = null;
                this.e.b();
                return;
            } catch (InterruptedException unused) {
            }
        }
    }

    @Override // a.a.a.a.d
    public void a() {
        d();
        Iterator it = this.e.a().iterator();
        while (it.hasNext()) {
            i iVar = (i) it.next();
            a(iVar.f336a, iVar.b, iVar.c);
        }
    }

    public void a(long j) {
        ArrayList arrayList = new ArrayList();
        for (Map.Entry entry : this.d.entrySet()) {
            if (((b) entry.getValue()).b + 3000 < j) {
                arrayList.add(entry.getKey());
            }
        }
        Iterator it = arrayList.iterator();
        while (it.hasNext()) {
            String str = (String) it.next();
            a(str, c.FAILED, null);
            this.d.remove(str);
        }
    }

    @Override // a.a.a.a.d
    public void a(String str, e eVar) {
        if (a.a(str)) {
            try {
                eVar.a(str, c.CACHED, InetAddress.getByName(str));
                return;
            } catch (UnknownHostException unused) {
            }
        }
        InetAddress inetAddress = (InetAddress) this.c.get(str);
        if (inetAddress != null) {
            eVar.a(str, c.CACHED, inetAddress);
        } else {
            b(str, eVar);
        }
    }

    @Override // a.a.a.a.d
    public boolean a(Selector selector) {
        return true;
    }

    @Override // a.a.a.a.d
    public boolean a(String[] strArr, Object obj) {
        return f();
    }

    @Override // a.a.a.a.d
    public void b() {
    }

    public void b(String str, e eVar) {
        b bVar = (b) this.d.get(str);
        if (bVar != null) {
            bVar.c.add(eVar);
            return;
        }
        b bVar2 = new b();
        bVar2.f330a = str;
        bVar2.c.add(eVar);
        this.d.put(str, bVar2);
        synchronized (this.f) {
            this.f.add(bVar2);
            this.f.notify();
        }
    }

    @Override // a.a.a.a.d
    public void c() {
        g();
    }

    void d() {
        long time = new Date().getTime();
        if (time - this.f333a >= 300000) {
            this.c.clear();
            this.f333a = time;
        }
        if (time - this.b >= 1000) {
            a(time);
            this.b = time;
        }
    }
}
