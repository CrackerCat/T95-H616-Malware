package a.a.a;

import co.fm.ub.d.tp;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.channels.Selector;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.atomic.AtomicBoolean;
/* loaded from: /mnt/shared/apks/menSe7ni.dex */
public class ae {

    /* renamed from: a  reason: collision with root package name */
    private static final Map f350a = new HashMap();
    private static final AtomicBoolean b = new AtomicBoolean();
    private static final a.a.a.a.d c = new a.a.a.a.g();
    private static Selector d = null;
    private static h e = null;
    private static byte[] f = null;

    /* renamed from: g  reason: collision with root package name */
    private static e f351g = null;
    private static boolean h = false;
    private static Exception i = null;
    private static long j = 0;
    private static long k = 0;
    private static long l = 0;

    public static void a() {
        b.set(false);
    }

    public static void a(long j2) {
        if (h) {
            return;
        }
        try {
            f351g.a(o.a(j2));
        } catch (IOException unused) {
            h = true;
        }
    }

    private static void a(long j2, byte[] bArr) {
        if (h) {
            return;
        }
        try {
            f351g.a(r.a(j2, bArr));
        } catch (IOException e2) {
            b.b("Post payload to proxy error: " + e2);
            h = true;
        }
    }

    public static void a(ad adVar, h hVar) {
        AtomicBoolean atomicBoolean;
        synchronized (ae.class) {
            do {
            } while (!b.compareAndSet(false, true));
            try {
                i = null;
                b.a("PrxThreadStart");
            } catch (Exception e2) {
                b();
                b.b("RuntimeException: " + e2);
                e2.printStackTrace();
                i = e2;
            }
            if (!a(new InetSocketAddress(adVar.f349a, adVar.b))) {
                b.b("Failed to init connection to prxserver");
                return;
            }
            e = hVar;
            f = adVar.c;
            while (true) {
                atomicBoolean = b;
                if (!atomicBoolean.get() || !c()) {
                    break;
                }
            }
            b();
            atomicBoolean.set(false);
            b.a("PrxThreadEnd");
        }
    }

    public static void a(e eVar, boolean z) {
        if (z) {
            f350a.remove(Long.valueOf(eVar.a()));
        }
        eVar.e();
    }

    private static void a(f fVar) {
        e eVar;
        k = new Date().getTime();
        if (h) {
            return;
        }
        int i2 = fVar.f359a.d;
        if (i2 == 5) {
            v a2 = u.a(fVar.b);
            e eVar2 = new e();
            if (!eVar2.a(a2.f367a, a2.b, d)) {
                a(a2.f367a);
            }
            eVar = (e) f350a.put(Long.valueOf(eVar2.a()), eVar2);
            if (eVar == null) {
                return;
            }
        } else if (i2 == 6) {
            e eVar3 = (e) f350a.get(Long.valueOf(o.a(fVar.b).f365a));
            if (eVar3 == null) {
                return;
            }
            a(eVar3, true);
            return;
        } else if (i2 == 7) {
            s a3 = r.a(fVar.b);
            e eVar4 = (e) f350a.get(Long.valueOf(a3.f366a));
            if (eVar4 == null) {
                return;
            }
            try {
                eVar4.a(a3.b);
                return;
            } catch (IOException e2) {
                b.b("post payload to upstream error: " + e2);
                a(eVar4, true);
                return;
            }
        } else if (i2 != 9) {
            if (i2 == 11) {
                long a4 = k.a(fVar.b);
                b.a("Version banned for " + a4);
                l = new Date().getTime() + a4;
                return;
            } else if (i2 != 255) {
                return;
            } else {
                b.a("ServerCheck");
                a(true);
                return;
            }
        } else {
            x a5 = w.a(fVar.b);
            e eVar5 = new e();
            if (!eVar5.a(a5.f368a, a5.b, a5.c, c, d)) {
                a(a5.f368a);
            }
            eVar = (e) f350a.put(Long.valueOf(eVar5.a()), eVar5);
            if (eVar == null) {
                return;
            }
        }
        a(eVar, false);
    }

    private static void a(boolean z) {
        if (h) {
            return;
        }
        long time = new Date().getTime();
        if (!z && time - j < tp.k) {
            return;
        }
        try {
            f351g.a(t.a());
        } catch (IOException unused) {
            h = true;
        }
        j = time;
    }

    private static boolean a(InetSocketAddress inetSocketAddress) {
        try {
            long time = new Date().getTime();
            while (time < l) {
                try {
                    b.a("Waiting for ban timeout");
                    Thread.sleep(tp.k);
                    time = new Date().getTime();
                } catch (InterruptedException unused) {
                }
            }
            d = Selector.open();
            e = null;
            f = null;
            e eVar = new e();
            f351g = eVar;
            if (!eVar.a(-1L, inetSocketAddress, d)) {
                f351g = null;
                d.close();
                return false;
            }
            h = false;
            k = new Date().getTime();
            a.a.a.a.d dVar = c;
            if (!dVar.a((String[]) null, a.c)) {
                return false;
            }
            if (dVar.a(d)) {
                return true;
            }
            dVar.c();
            return true;
        } catch (IOException unused2) {
            b.b("Failed to open selector");
            return false;
        }
    }

    private static void b() {
        for (Map.Entry entry : f350a.entrySet()) {
            ((e) entry.getValue()).e();
        }
        f350a.clear();
        c.c();
        k = 0L;
        h = false;
        e eVar = f351g;
        if (eVar != null) {
            eVar.e();
            f351g = null;
        }
        f = null;
        e = null;
        try {
            d.close();
        } catch (IOException unused) {
            b.b("Closing selector error");
        }
        d = null;
    }

    private static void b(long j2) {
        if (h) {
            return;
        }
        try {
            f351g.a(q.a(j2));
        } catch (IOException unused) {
            h = true;
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:85:0x0151, code lost:
        if (r6 == a.a.a.ae.f351g) goto L45;
     */
    /* JADX WARN: Removed duplicated region for block: B:47:0x0159  */
    /* JADX WARN: Removed duplicated region for block: B:50:0x0167 A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:52:0x003c A[SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
    private static boolean c() {
        /*
            Method dump skipped, instructions count: 386
            To view this dump add '--comments-level debug' option
        */
        throw new UnsupportedOperationException("Method not decompiled: a.a.a.ae.c():boolean");
    }

    private static void d() {
        if (!h) {
            try {
                f351g.b().finishConnect();
                return;
            } catch (IOException e2) {
                b.b("prxServer finish connection error: " + e2);
                h = true;
                return;
            }
        }
        throw new RuntimeException("unexpected error before connection is establshed");
    }

    private static f e() {
        if (h) {
            return null;
        }
        try {
            return f351g.f();
        } catch (IOException unused) {
            h = true;
            return null;
        }
    }

    private static void f() {
        if (h) {
            return;
        }
        try {
            f351g.a(n.a(f, e, y.f369a));
            j = new Date().getTime();
        } catch (IOException e2) {
            b.b("Post chkkey to proxy error: " + e2);
            h = true;
        }
    }

    private static void g() {
        if (h) {
            return;
        }
        try {
            f351g.g();
        } catch (IOException e2) {
            b.b("Flush proxy output error: " + e2);
            h = true;
        }
    }
}
